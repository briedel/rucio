#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2012

"""
    Rucio Administration Utility
"""

import argparse
import os
import sys
import time

from logging import getLogger

from rucio.client.accountclient import AccountClient
from rucio.client.rseclient import RSEClient
from rucio.client.scopeclient import ScopeClient
from rucio.client.client import Client


from rucio import version

# If ../lib/rucio/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'lib/rucio', '__init__.py')):
    sys.path.insert(0, possible_topdir)


SUCCESS = 0
FAILURE = 1
DEFAULT_PORT = 443


def add_account(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Adds a new account. Specify metadata fields as arguments.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        accountClient.create_account(accountName=args.acnt, accountType=args.acnttype)
        print 'Added new account: %s' % args.acnt
    except Exception, e:
            print 'Failed to create account %s' % args.acnt
            print e
            return FAILURE
    return SUCCESS


def disable_account(args):
    """
    %(prog)s disable [options] <field1=value1 field2=value2 ...>

    Disable account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        accountClient.disable_account(args.acnt)
    except Exception, e:
            print 'Failed to disable account %s' % args.acnt
            print e
            return FAILURE
    return SUCCESS


def list_accounts(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List accounts.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        accounts = accountClient.list_accounts()
    except Exception, e:
            print 'Failed to list accounts'
            print e
            return FAILURE

    for acnt in accounts:
        print acnt

    return SUCCESS


def show_account(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Show extended information of a given account

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        info = accountClient.get_account(accountName=args.acnt)
    except Exception, e:
            print 'Failed to show account'
            print e
            return FAILURE

    for k in info:
        print k.ljust(10) + ' : ' + str(info[k])

    return SUCCESS


def identity_add(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Grant an identity access to an account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        accountClient.add_identity(accountName=args.acnt, identity=args.identity, authtype=args.authtype)
        print 'Added new identity to account: %s-%s' % (args.identity, args.acnt)
    except Exception, e:
            print 'Failed  to grant an identity access to an account'
            print e
            return FAILURE

    return SUCCESS


def identity_delete(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Revoke an identity's access to an account.

    """
    pass


def add_rse(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Adds a new rse. Specify metadata fields as arguments.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.create_rse(args.rse)
        print 'Added new RSE: %s' % args.rse
    except Exception, e:
            print 'Failed to create rse %s' % args.rse
            print e
            return FAILURE
    return SUCCESS


def disable_rse(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Disable rse.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = Client(host=args.host, auth_host=args.auth_host,
                    account=args.account,
                    auth_type=args.auth_strategy, creds=creds,
                    ca_cert=args.ca_certificate)
    try:
        client.disable_rse(args.location)
    except Exception, e:
            print 'Failed to disable account %s' % args.location
            print e
            return FAILURE
    return SUCCESS


def list_rses(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List rses.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        locations = client.list_rses()
    except Exception, e:
            print 'Failed to list locations'
            print e
            return FAILURE

    for location in locations:
        print location

    return SUCCESS


def tag_rse(args):
    """
    %(prog)s tag [options] <field1=value1 field2=value2 ...>

    Tag RSE.

    """
    pass

def untag_rse(args):
    """
    %(prog)s tag [options] <field1=value1 field2=value2 ...>

    Untag RSE.

    """
    pass

def add_scope(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    Add scope.

    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = ScopeClient(rucio_host=args.host, auth_host=args.auth_host,
                         account=args.account,
                         auth_type=args.auth_strategy, creds=creds,
                         ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_scope(accountName=args.acnt, scopeName=args.scope)
        print 'Added new scope to account: %s-%s' % (args.scope, args.acnt)
    except Exception, e:
            print 'Failed to add scope'
            print e
            return FAILURE

    return SUCCESS

if __name__ == '__main__':
    usage = """
%(prog)s

 <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=False)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', dest="host", metavar="ADDRESS", help="The Rucio API host." "Default: %default")
    oparser.add_argument('--auth_host', dest="auth_host", metavar="ADDRESS", help="The Rucio Authentication host."  "Default: %default")
    oparser.add_argument('-a', '--account', dest="account", metavar="ACCOUNT", help="Rucio account to use. " "Default: %default")
    oparser.add_argument('-S', '--auth_strategy', dest="auth_strategy", default=None, help="Authentication strategy (userpass or x509 or ...)")
    oparser.add_argument('-T', '--timeout=', dest="timeout", type=float, default=None, help="Set all timeout values to SECONDS")

    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')

    # Options for the x509  auth_strategy
    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca_certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # The account subparser
    account_parser = subparsers.add_parser('account', help='Account methods')
    account_subparser = account_parser.add_subparsers()

    # The list_accounts command
    list_account_parser = account_subparser.add_parser('list', help='List Rucio accounts')
    list_account_parser.set_defaults(which='list_accounts')

    # The add_account command
    add_account_parser = account_subparser.add_parser('add', help='Add Rucio account')
    add_account_parser.set_defaults(which='add_account')
    add_account_parser.add_argument('acnt', action='store', help='Account name')
    add_account_parser.add_argument('acnttype', action='store', help='Account Type')

    # The disable_account command
    disable_account_parser = account_subparser.add_parser('disable', help='Disable Rucio account')
    disable_account_parser.set_defaults(which='disable_account')
    disable_account_parser.add_argument('acnt', action='store', help='Account name')

    # The show_account command
    show_account_parser = account_subparser.add_parser('show', help='Show detailed information about an account')
    show_account_parser.set_defaults(which='show_account')
    show_account_parser.add_argument('acnt', action='store', help='Account name')

    # The identity subparser
    identity_parser = subparsers.add_parser('identity', help='Identity methods')
    identity_subparser = identity_parser.add_subparsers()

    # The identity_add command
    identity_add_parser = identity_subparser.add_parser('add', help='Grant an identity access to an account')
    identity_add_parser.set_defaults(which='identity_add')
    identity_add_parser.add_argument('acnt', action='store', help='Account name')
    identity_add_parser.add_argument('authtype', action='store', help='Authentivation type(e.g. X509, gss)')
    identity_add_parser.add_argument('identity', action='store', help='Identity')

    # The identity_delete command
    identity_delete_parser = identity_subparser.add_parser('delete', help="Revoke an identity's access to an account")
    identity_delete_parser.set_defaults(which='identity_delete')
    identity_delete_parser.add_argument('acnt', action='store', help='Account name')
    identity_delete_parser.add_argument('authtype', action='store', help='Authentivation type(e.g. X509, gss)')
    identity_delete_parser.add_argument('identity', action='store', help='Identity')

    # The RSE subparser
    rse_parser = subparsers.add_parser('rse', help='RSE(Rucio Storage Element) methods')
    rse_subparser = rse_parser.add_subparsers()

    # The list_rses command
    list_rse_parser = rse_subparser.add_parser('list', help='List Rucio RSEs')
    list_rse_parser.set_defaults(which='list_rses')

    # The add_rse command
    add_rse_parser = rse_subparser.add_parser('add', help='Add RSE')
    add_rse_parser.set_defaults(which='add_rse')
    add_rse_parser.add_argument('rse', action='store', help='RSE name')

    # The tag_rse command
    tag_rse_parser = rse_subparser.add_parser('tag', help='Add a RSE tag to a RSE')
    tag_rse_parser.set_defaults(which='tag_rse')
    tag_rse_parser.add_argument('rse', action='store', help='RSE name')
    tag_rse_parser.add_argument('tag', action='store', help='RSE Tag name')

    # The untag_rse command
    untag_rse_parser = rse_subparser.add_parser('untag', help='Remove a RSE tag from a RSE')
    untag_rse_parser.set_defaults(which='untag_rse')
    untag_rse_parser.add_argument('rse', action='store', help='RSE name')
    untag_rse_parser.add_argument('tag_rse', action='store', help='RSE Tag name')

    # The disable_location command
    disable_rse_parser = rse_subparser.add_parser('disable', help='Disable RSE')
    disable_rse_parser.set_defaults(which='disable_rse')
    disable_rse_parser.add_argument('rse', action='store', help='RSE name')

    # The scope subparser
    scope_parser = subparsers.add_parser('scope', help='Scope methods')
    scope_subparser = scope_parser.add_subparsers()

    # The add_scope command
    add_scope_parser = scope_subparser.add_parser('add', help='Add scope')
    add_scope_parser.set_defaults(which='add_scope')
    add_scope_parser.add_argument('scope', action='store', help='Scope name')
    add_scope_parser.add_argument('acnt', action='store', help='Account name')


    commands = {
                'add_account': add_account,
                'list_accounts': list_accounts,
                'disable_account': disable_account,
                'show_account': show_account,
                'identity_add': identity_add,
                'identity_delete': identity_delete,
                'add_rse': add_rse,
                'tag_rse': tag_rse,
                'untag_rse': untag_rse,
                'list_rses': list_rses,
                'disable_rse': disable_rse,
                'add_scope': add_scope,
               }

    args = oparser.parse_args(sys.argv[1:])

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError, NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
