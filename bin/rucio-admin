#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012-2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2012-2013

"""
    Rucio Administration Utility
"""

import argcomplete
import argparse
import os
import sys
import time

from rucio.client.accountclient import AccountClient
from rucio.client.metaclient import MetaClient
from rucio.client.rseclient import RSEClient
from rucio.client.scopeclient import ScopeClient

from rucio import version

# If ../lib/rucio/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'lib/rucio', '__init__.py')):
    sys.path.insert(0, possible_topdir)


SUCCESS = 0
FAILURE = 1
DEFAULT_PORT = 443


def add_account(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Adds a new account. Specify metadata fields as arguments.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.issuer,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        accountClient.add_account(account=args.account, type=args.accounttype)
        print 'Added new account: %s' % args.account
    except Exception, e:
            print 'Failed to add account %s' % args.account
            print e
            return FAILURE
    return SUCCESS


def delete_account(args):
    """
    %(prog)s disable [options] <field1=value1 field2=value2 ...>

    Delete account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.issuer,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        accountClient.delete_account(args.account)
        print 'Deleted account: %s' % args.account
    except Exception, e:
            print 'Failed to disable account %s' % args.account
            print e
            return FAILURE
    return SUCCESS


def list_accounts(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List accounts.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.issuer,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        accounts = accountClient.list_accounts()
    except Exception, e:
            print 'Failed to list accounts'
            print e
            return FAILURE

    for account in accounts:
        print account['account']

    return SUCCESS


def info_account(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Show extended information of a given account

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.issuer,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        info = accountClient.get_account(account=args.account)
    except Exception, e:
            print 'Failed to show account information'
            print e
            return FAILURE

    for k in info:
        print k.ljust(10) + ' : ' + str(info[k])

    return SUCCESS


def list_identities(args):
    """
    %(prog)s list-identities [options] <field1=value1 field2=value2 ...>

    List all identities on an account.
    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.issuer,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        identities = accountClient.list_identities(account=args.account)
    except Exception, e:
            print 'Failed to list identities for account %s' % args.account
            print e
            return FAILURE

    for identity in identities:
        print 'Identity: %(identity)s,\ttype: %(type)s' % identity

    return SUCCESS


def set_limits(args):
    """
    %(prog)s set-limits [options] <field1=value1 field2=value2 ...>

    Grant an identity access to an account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                  account=args.issuer,
                  auth_type=args.auth_strategy, creds=creds,
                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        print 'Added new limits to account: %s' % (args.account)
    except Exception, e:
            print 'Failed add limits to an account'
            print e
            return FAILURE

    return SUCCESS


def get_limits(args):
    """
    %(prog)s get-limits [options] <field1=value1 field2=value2 ...>

    Grant an identity access to an account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                  account=args.account,
                  auth_type=args.auth_strategy, creds=creds,
                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        print 'Added new limits to account: %s' % (args.account)
    except Exception, e:
            print 'Failed add limits to an account'
            print e
            return FAILURE

    return SUCCESS


def del_limits(args):
    """
    %(prog)s del-limits [options] <field1=value1 field2=value2 ...>

    Grant an identity access to an account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                  account=args.issuer,
                  auth_type=args.auth_strategy, creds=creds,
                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        print 'Added new limits to account: %s' % (args.account)
    except Exception, e:
            print 'Failed add limits to an account'
            print e
            return FAILURE

    return SUCCESS


def identity_add(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Grant an identity access to an account.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.issuer,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        accountClient.add_identity(account=args.account, identity=args.identity, authtype=args.authtype, email=args.email)
        print 'Added new identity to account: %s-%s' % (args.identity, args.account)
    except Exception, e:
            print 'Failed to grant an identity access to an account'
            print e
            return FAILURE

    return SUCCESS


def identity_delete(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Revoke an identity's access to an account.

    """
    pass


def add_rse(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Adds a new rse. Specify metadata fields as arguments.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.issuer,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_rse(args.rse)
        print 'Added new RSE: %s' % args.rse
    except Exception, e:
            print 'Failed to add rse %s' % args.rse
            print e
            return FAILURE
    return SUCCESS


def disable_rse(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Disable rse.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.issuer,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.delete_rse(args.rse)
    except Exception, e:
            print 'Failed to delete RSE %s' % args.rse
            print e
            return FAILURE
    return SUCCESS


def list_rses(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List rses.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.issuer,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        rses = client.list_rses()
    except Exception, e:
            print 'Failed to list RSEs'
            print e
            return FAILURE

    for rse in rses:
        print '%(rse)s' % rse

    return SUCCESS


def setattr_rse(args):
    """
    %(prog)s setattr [options] <field1=value1 field2=value2 ...>

    setattr RSE.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.issuer,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        client.add_rse_attribute(rse=args.rse, key=args.key, value=args.value)
        print 'Added new RSE attribute for %s: %s-%s ' % (args.rse, args.key, args.value)
    except Exception, e:
            print 'Failed to add RSE attribute'
            print e
            return FAILURE

    return SUCCESS


def getattr_rse(args):
    """
    %(prog)s getattr [options] <field1=value1 field2=value2 ...>

    getattr RSE.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.issuer,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        attributes = client.list_rse_attributes(rse=args.rse)
    except Exception, e:
            print 'Failed to get RSE attributes'
            print e
            return FAILURE

    for k in attributes:
        print k + ': ' + str(attributes[k])

    return SUCCESS


def delattr_rse(args):
    """
    %(prog)s setattr [options] <field1=value1 field2=value2 ...>

    setattr RSE.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.issuer,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        client.delete_rse_attribute(rse=args.rse, key=args.key)
        print 'Deleted RSE attribute for %s: %s-%s ' % (args.rse, args.key, args.value)
    except Exception, e:
            print 'Failed to delete RSE attribute'
            print e
            return FAILURE

    return SUCCESS


def add_scope(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Add scope.

    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = ScopeClient(rucio_host=args.host, auth_host=args.auth_host,
                         account=args.issuer,
                         auth_type=args.auth_strategy, creds=creds,
                         ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_scope(account=args.account, scope=args.scope)
        print 'Added new scope to account: %s-%s' % (args.scope, args.account)
    except Exception, e:
            print 'Failed to add scope'
            print e
            return FAILURE
    return SUCCESS


def list_scopes(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List scopes.

    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = ScopeClient(rucio_host=args.host, auth_host=args.auth_host,
                         account=args.issuer,
                         auth_type=args.auth_strategy, creds=creds,
                         ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        scopes = client.list_scopes()
    except Exception, e:
            print 'Failed to list scopes'
            print e
            return FAILURE

    for scope in scopes:
        print scope

    return SUCCESS


def add_meta_key(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Add a key.
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = MetaClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.issuer,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_key(key=args.key, type=args.type, regexp=args.regexp)
        print 'Added new key: %s' % (args.key)
    except Exception, e:
            print 'Failed to add key'
            print e
            return FAILURE
    return SUCCESS


def list_meta_keys(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List keys.

    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = MetaClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.issuer,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        keys = client.list_keys()
    except Exception, e:
            print 'Failed to list keys'
            print e
            return FAILURE

    for key in keys:
        print key

    return SUCCESS


def list_meta_values(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List all values to a list.
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = MetaClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.issuer,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        values = client.list_values(key=args.key)
    except Exception, e:
            print 'Failed to list values for a key'
            print e
            return FAILURE
    for value in values:
        print value

    return SUCCESS


def add_meta_value(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Add a default value to a key.
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = MetaClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.issuer,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_value(key=args.key, value=args.value)
    except Exception, e:
            print 'Failed to add an default value to a key'
            print e
            return FAILURE


if __name__ == '__main__':
    usage = """
%(prog)s

 <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=True)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', dest="host", metavar="ADDRESS", help="The Rucio API host")
    oparser.add_argument('--auth_host', dest="auth_host", metavar="ADDRESS", help="The Rucio Authentication host")
    oparser.add_argument('-a', '--account', dest="issuer", metavar="ACCOUNT", help="Rucio account to use")
    oparser.add_argument('-S', '--auth_strategy', dest="auth_strategy", default=None, help="Authentication strategy (userpass or x509 or ...)")
    oparser.add_argument('-T', '--timeout', dest="timeout", type=float, default=None, help="Set all timeout values to SECONDS")

    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')

    # Options for the x509  auth_strategy
    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca_certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # The account subparser
    account_parser = subparsers.add_parser('account', help='Account methods')
    account_subparser = account_parser.add_subparsers()

    # The list_accounts command
    list_account_parser = account_subparser.add_parser('list', help='List Rucio accounts')
    list_account_parser.set_defaults(which='list_accounts')

    # The add_account command
    add_account_parser = account_subparser.add_parser('add', help='Add Rucio account')
    add_account_parser.set_defaults(which='add_account')
    add_account_parser.add_argument('account', action='store', help='Account name')
    add_account_parser.add_argument('--type', dest='accounttype', default='USER', help='Account Type')

    # The disable_account command
    del_account_parser = account_subparser.add_parser('del', help='Del Rucio account')
    del_account_parser.set_defaults(which='del_account')
    del_account_parser.add_argument('account', action='store', help='Account name')

    # The show_account command
    info_account_parser = account_subparser.add_parser('info', help='Show detailed information about an account')
    info_account_parser.set_defaults(which='info_account')
    info_account_parser.add_argument('account', action='store', help='Account name')

    # The list_account_identities command
    list_account_identities_parser = account_subparser.add_parser('list-identities', help='List all identities on an account')
    list_account_identities_parser.set_defaults(which='list_identities')
    list_account_identities_parser.add_argument('account', action='store', help='Account name')

    # The set-account-limits command
    set_account_limits_parser = account_subparser.add_parser('set-limits', help='Set the limits for the provided account')
    set_account_limits_parser.set_defaults(which='set_limits')
    set_account_limits_parser.add_argument('--account', dest='account', action='store', help='Account name', required=True)
    set_account_limits_parser.add_argument('--rse_expr', dest='rse_expre', action='store', help='RSE boolean expression', required=True)
    set_account_limits_parser.add_argument('--value', dest='value', action='store', help='The total number of bytes that can be stored', required=True)

    # The get-account-limits command
    #get_account_limits_parser = account_subparser.add_parser('get-limits', help='Get the limits for the provided account')
    #get_account_limits_parser.set_defaults(which='get_limits')
    #get_account_limits_parser.add_argument('account', action='store', help='Account name')

    # The del-account-limits command
    #del_account_limits_parser = account_subparser.add_parser('del-limits', help='Delete the limits for the provided account')
    #del_account_limits_parser.set_defaults(which='del_limits')
    #del_account_limits_parser.add_argument('--account', 'account', action='store', help='Account name', required=True)
    #del_account_limits_parser.add_argument('--rse_expr', 'rse_expre', action='store', help='RSE boolean expression', required=True)

    # The identity subparser
    identity_parser = subparsers.add_parser('identity', help='Identity methods')
    identity_subparser = identity_parser.add_subparsers()

    # The identity_add command
    identity_add_parser = identity_subparser.add_parser('add', help='Grant an identity access to an account')
    identity_add_parser.set_defaults(which='identity_add')
    identity_add_parser.add_argument('--account', dest='account', action='store', help='Account name', required=True)
    identity_add_parser.add_argument('--type', dest='authtype', action='store', help='Authentivation type(e.g. X509, gss)', required=True)
    identity_add_parser.add_argument('--id', dest='identity', action='store', help='Identity', required=True)
    identity_add_parser.add_argument('--email', dest='email', action='store', default=None, help='Email address associated with the identity')

    # The identity_delete command
    identity_delete_parser = identity_subparser.add_parser('delete', help="Revoke an identity's access to an account")
    identity_delete_parser.set_defaults(which='identity_delete')
    identity_delete_parser.add_argument('--account', dest='account', action='store', help='Account name', required=True)
    identity_delete_parser.add_argument('--type', dest='authtype', action='store', help='Authentivation type(e.g. X509, gss)', required=True)
    identity_delete_parser.add_argument('--id', dest='identity', action='store', help='Identity', required=True)

    # The RSE subparser
    rse_parser = subparsers.add_parser('rse', help='RSE(Rucio Storage Element) methods')
    rse_subparser = rse_parser.add_subparsers()

    # The list_rses command
    list_rse_parser = rse_subparser.add_parser('list', help='List Rucio RSEs')
    list_rse_parser.set_defaults(which='list_rses')

    # The add_rse command
    add_rse_parser = rse_subparser.add_parser('add', help='Add RSE')
    add_rse_parser.set_defaults(which='add_rse')
    add_rse_parser.add_argument('rse', action='store', help='RSE name')

    # The setattr_rse command
    setattr_rse_parser = rse_subparser.add_parser('set-attribute', help='Add RSE attribute(key-value pair)')
    setattr_rse_parser.set_defaults(which='setattr_rse')
    setattr_rse_parser.add_argument('--rse', dest='rse', action='store', help='RSE name', required=True)
    setattr_rse_parser.add_argument('--key', dest='key', action='store', help='Attribute key', required=True)
    setattr_rse_parser.add_argument('--value', dest='value', action='store', help='Attribute value', required=True)

    # The delattr_rse command
    delattr_rse_parser = rse_subparser.add_parser('del-attribute', help='Delete a RSE attribute(key-value pair)')
    delattr_rse_parser.set_defaults(which='delattr_rse')
    delattr_rse_parser.add_argument('--rse', dest='rse', action='store', help='RSE name', required=True)
    delattr_rse_parser.add_argument('--key', dest='key', action='store', help='Attribute key', required=True)
    delattr_rse_parser.add_argument('--value', dest='value', action='store', help='Attribute value', required=True)

    # The getattr_rse command
    getattr_rse_parser = rse_subparser.add_parser('get-attribute', help='List RSE attributes')
    getattr_rse_parser.set_defaults(which='getattr_rse')
    getattr_rse_parser.add_argument(dest='rse', action='store', help='RSE name')

    # The listattr_rse command
    #listattr_rse_parser = rse_subparser.add_parser('listattr', help='List RSE attributes')
    #listattr_rse_parser.set_defaults(which='listattr_rse')

    # The disable_location command
    disable_rse_parser = rse_subparser.add_parser('del', help='Disable RSE')
    disable_rse_parser.set_defaults(which='disable_rse')
    disable_rse_parser.add_argument('rse', action='store', help='RSE name')

    # The scope subparser
    scope_parser = subparsers.add_parser('scope', help='Scope methods')
    scope_subparser = scope_parser.add_subparsers()

    # The add_scope command
    add_scope_parser = scope_subparser.add_parser('add', help='Add scope')
    add_scope_parser.set_defaults(which='add_scope')
    add_scope_parser.add_argument('--account', dest='account', action='store', help='Account name', required=True)
    add_scope_parser.add_argument('--scope', dest='scope', action='store', help='Scope name', required=True)

    # The list_scope command
    list_scope_parser = scope_subparser.add_parser('list', help='List scopes')
    list_scope_parser.set_defaults(which='list_scopes')
    list_scope_parser.add_argument('--account', dest='account', action='store', help='Account name')

    # The metadata subparser
    meta_parser = subparsers.add_parser('meta', help='Metadata methods')
    meta_subparser = meta_parser.add_subparsers()

    # The add_meta command
    add_meta_parser = meta_subparser.add_parser('add', help='Add a new allowed key')
    add_meta_parser.set_defaults(which='add_meta_key')
    add_meta_parser.add_argument('key', action='store', help='Key name')
    add_meta_parser.add_argument('--type', dest='type', action='store', help='Type of the values')
    add_meta_parser.add_argument('--regexp', dest='regexp', action='store', help='the regular expression that values should match')

    # The del_meta command
    del_meta_parser = meta_subparser.add_parser('del', help='Del metadata')
    del_meta_parser.set_defaults(which='del_meta')

    # The list_meta command
    list_meta_parser = meta_subparser.add_parser('list', help='List metadata')
    list_meta_parser.set_defaults(which='list_meta_keys')

    # The add_meta_value command
    add_meta_value_parser = meta_subparser.add_parser('add-value', help='Add value for a key')
    add_meta_value_parser.set_defaults(which='add_meta_value')
    add_meta_value_parser.add_argument('--key', dest='key', action='store', help='Key', required=True)
    add_meta_value_parser.add_argument('--value', dest='value', action='store', help='Add a default value', required=True)

    # The list_meta command
    list_meta_values_parser = meta_subparser.add_parser('list-values', help='List values for a key')
    list_meta_values_parser.set_defaults(which='list_meta_values')
    list_meta_values_parser.add_argument('key', action='store', help='Key')

    commands = {'add_account': add_account,
                'list_accounts': list_accounts,
                'del_account': delete_account,
                'info_account': info_account,
                'set_limits': set_limits,
                'get_limits': get_limits,
                'del_limits': del_limits,
                'list_identities': list_identities,
                'identity_add': identity_add,
                'identity_delete': identity_delete,
                'add_rse': add_rse,
                'setattr_rse': setattr_rse,
                'getattr_rse': getattr_rse,
                'delattr_rse': delattr_rse,
                'list_rses': list_rses,
                'disable_rse': disable_rse,
                'add_scope': add_scope,
                'list_scopes': list_scopes,
                'add_meta_key': add_meta_key,
                'list_meta_keys': list_meta_keys,
                'add_meta_value': add_meta_value,
                'list_meta_values': list_meta_values,
                }

    argcomplete.autocomplete(oparser)

    if len(sys.argv) == 1:
        oparser.print_help()
        sys.exit(FAILURE)

    args = oparser.parse_args(sys.argv[1:])

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError, NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
