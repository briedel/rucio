#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012

"""
    Rucio Administration Utility
"""

import argparse
import functools
import gettext
import os
import sys
import time
from urlparse import urlparse

from rucio.client.accountclient import AccountClient
from rucio.client.client import Client

from rucio import version

# If ../lib/rucio/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'lib/rucio', '__init__.py')):
    sys.path.insert(0, possible_topdir)


SUCCESS = 0
FAILURE = 1
DEFAULT_PORT = 443


def add_account(args):
    """
%(prog)s add [options] <field1=value1 field2=value2 ...>

Adds a new account. Specify metadata fields as arguments.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = {}

    accountClient = AccountClient(host=args.host, port=args.port, account=args.account, use_ssl=True, auth_type=args.auth_strategy, creds=creds)
    try:
        accountClient.create_account(args.acnt)
    except Exception, e:
            print 'Failed to create account %s' % args.acnt
            print e
            return FAILURE
    return SUCCESS


def disable_account(args):
    """
%(prog)s del [options] <field1=value1 field2=value2 ...>

Disable account.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = {}

    accountClient = AccountClient(host=args.host, port=args.port, account=args.account, use_ssl=True, auth_type=args.auth_strategy, creds=creds)
    try:
        accountClient.disable_account(args.acnt)
    except Exception, e:
            print 'Failed to disable account %s' % args.acnt
            print e
            return FAILURE
    return SUCCESS


def list_accounts(args):
    """
%(prog)s del [options] <field1=value1 field2=value2 ...>

List accounts.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = {}

    accountClient = AccountClient(host=args.host, port=args.port, account=args.account, use_ssl=True, auth_type=args.auth_strategy, creds=creds)
    try:
        accounts = accountClient.list_accounts()
    except Exception, e:
            print 'Failed to list accounts'
            print e
            return FAILURE

    for acnt in accounts:
        print acnt

    return SUCCESS


def add_location(args):
    """
%(prog)s add [options] <field1=value1 field2=value2 ...>

Adds a new location. Specify metadata fields as arguments.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = {}

    client = Client(host=args.host, port=args.port, account=args.account, use_ssl=True, auth_type=args.auth_strategy, creds=creds)
    try:
        client.create_location(args.location)
    except Exception, e:
            print 'Failed to create location %s' % args.location
            print e
            return FAILURE
    return SUCCESS


def disable_location(args):
    """
%(prog)s del [options] <field1=value1 field2=value2 ...>

Disable location.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = {}

    client = Client(host=args.host, port=args.port, account=args.account, use_ssl=True, auth_type=args.auth_strategy, creds=creds)
    try:
        client.disable_location(args.location)
    except Exception, e:
            print 'Failed to disable account %s' % args.location
            print e
            return FAILURE
    return SUCCESS


def list_locations(args):
    """
%(prog)s del [options] <field1=value1 field2=value2 ...>

List locations.

    """
    # For the moment...
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = {}

    client = Client(host=args.host, port=args.port, account=args.account, use_ssl=True, auth_type=args.auth_strategy, creds=creds)
    try:
        locations = client.list_locations()
    except Exception, e:
            print 'Failed to list locations'
            print e
            return FAILURE

    for location in locations:
        print location

    return SUCCESS

if __name__ == '__main__':
    usage = """
%(prog)s <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), usage=usage.strip(), add_help=False)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', metavar="ADDRESS", default="127.0.0.1", help="Address of Rucio API host. " "Default: %default")
    oparser.add_argument('-p', '--port', dest="port", metavar="PORT", type=int, default=DEFAULT_PORT, help="Port the Rucio API host listens on. " "Default: %default")
    oparser.add_argument('-a', '--account', dest="account", metavar="ACCOUNT", help="Rucio account to use. " "Default: %default")
    oparser.add_argument('-S', '--auth_strategy', dest="auth_strategy", default='userpass', help="Authentication strategy (userpass or x509 or ...)")
    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')
    # Options for the x509  auth_strategy


    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca-certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # The account subparser
    account_parser = subparsers.add_parser('account', help='Account methods')
    account_subparser = account_parser.add_subparsers()

    # The list_accounts command
    list_account_parser = account_subparser.add_parser('list', help='List Rucio accounts')
    list_account_parser.set_defaults(which='list_accounts')

    # The add_account command
    add_account_parser = account_subparser.add_parser('add', help='Add Rucio account')
    add_account_parser.set_defaults(which='add_account')
    add_account_parser.add_argument('acnt', action='store', help='Account name')

    # The disable_account command
    disable_account_parser = account_subparser.add_parser('disable', help='Disable Rucio account')
    disable_account_parser.set_defaults(which='disable_account')
    disable_account_parser.add_argument('acnt', action='store', help='Account name')

    # The location subparser
    location_parser = subparsers.add_parser('location', help='Location methods')
    location_subparser = location_parser.add_subparsers()

    # The list_locations command
    list_location_parser = location_subparser.add_parser('list', help='List Rucio locations')
    list_location_parser.set_defaults(which='list_locations')

    # The add_location command
    add_location_parser = location_subparser.add_parser('add', help='Add Rucio location')
    add_location_parser.set_defaults(which='add_location')
    add_location_parser.add_argument('location', action='store', help='Location name')

    # The disable_location command
    disable_location_parser = location_subparser.add_parser('disable', help='Disable Rucio location')
    disable_location_parser.set_defaults(which='disable_location')
    disable_location_parser.add_argument('location', action='store', help='Location name')

    commands = {
                'add_account': add_account,
                'list_accounts': list_accounts,
                'disable_account': disable_account,
                'add_location': add_location,
                'list_locations': list_locations,
                'disable_location': disable_location,
               }

    args = oparser.parse_args(sys.argv[1:])

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError, NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
