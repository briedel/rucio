#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012

"""
    Rucio CLI.
"""

import argparse
import os
import sys
import time


from rucio import client as rucio_client
from rucio import version
from rucio.client.accountclient import AccountClient
from rucio.client.pingclient import PingClient
from rucio.client.cli.upload import upload as cli_upload
from rucio.client.cli.download import download as cli_download


SUCCESS = 0
FAILURE = 1

DEFAULT_SECURE_PORT = 443
DEFAULT_PORT = 80


def get_client(args):
    """
    Returns a new client object.
    specified by the --host and --port options
    supplied to the CLI
    """
    return rucio_client.Client(host="0.0.0.0")


def dataset_add(args):
    """
%(prog)s add [options] <field1=value1 field2=value2 ...>

Adds a new dataset. Specify metadata fields as arguments.

    """
    c = get_client(args)
    #args.dataset
    c.add_dataset()
    return SUCCESS


def ping(args):
    """

    Pings a Rucio server.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = PingClient(rucio_host=args.host, rucio_port=args.port,
                        auth_host=args.auth_host, auth_port=args.auth_port,
                        account=args.account, use_ssl=False,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)

    server_info = client.ping()
    print server_info['version']
    return SUCCESS

def whoami_account(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Show extended information of a given account

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    accountClient = AccountClient(rucio_host=args.host, rucio_port=args.port,
                                  auth_host=args.auth_host, auth_port=args.auth_port,
                                  account=args.account, use_ssl=True,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        info = accountClient.whoami()
    except Exception, e:
            print 'Failed to show account'
            print e
            return FAILURE

    for k in info:
        print k.ljust(10) + ' : ' + str(info[k])

    return SUCCESS


def upload(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Upload files into Rucio

    """
    cli_upload


def download(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Download files from Rucio

    """
    cli_download


if __name__ == '__main__':
    usage = """
usage: %(prog)s <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=False)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', metavar="ADDRESS", help="Address of Rucio API host. " "Default: %default")
    oparser.add_argument('-p', '--port', dest="port", metavar="PORT", type=int, help="Port the Rucio API host listens on. " "Default: %default")
    oparser.add_argument('--auth_host', dest="auth_host", metavar="ADDRESS", help="Address of Rucio Authentication host. " "Default: %default")
    oparser.add_argument('--auth_port', dest="auth_port", metavar="ADDRESS", help="Port the Rucio Authentication host listens on. " "Default: %default")
    oparser.add_argument('-a', '--account', dest="account", metavar="ACCOUNT", help="Rucio account to use. " "Default: %default")
    oparser.add_argument('-S', '--auth_strategy', dest="auth_strategy", default=None, help="Authentication strategy (userpass or x509 or ...)")
    oparser.add_argument('-T', '--timeout=', dest="timeout", default=None, help="Set all timeout values to SECONDS")

    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')

    # Options for the x509  auth_strategy
    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca_certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # Ping command
    ping_parser = subparsers.add_parser('ping', help='Ping Rucio server')
    ping_parser.set_defaults(which='ping')

    # The account subparser
    account_parser = subparsers.add_parser('account', help='Account methods')
    account_subparser = account_parser.add_subparsers()

    # The whoami command
    whoami_account_parser = account_subparser.add_parser('whoami', help='Get information about account whose token is used')
    whoami_account_parser.set_defaults(which='whoami_account')

    # The upload subparser
    upload_parser = subparsers.add_parser('upload', help='Upload method')
    upload_parser.set_defaults(which='upload')

    # The download subparser
    download_parser = subparsers.add_parser('download', help='Download method')
    download_parser.set_defaults(which='download')

    # A list command
    list_parser = subparsers.add_parser('list', help='List contents')
    list_parser.set_defaults(which='list')
    list_parser.add_argument('dataset', action='store', help='list')

    # A create command
    create_parser = subparsers.add_parser('create', help='Create a dataset')
    create_parser.set_defaults(which='create')
    create_parser.add_argument('dataset', action='store', help='New dataset to create')

    # A delete command
    delete_parser = subparsers.add_parser('delete', help='Remove a dataset')
    delete_parser.set_defaults(which='delete')
    delete_parser.add_argument('dataset', action='store', help='The dataset to remove')

    args = oparser.parse_args(sys.argv[1:])

    commands = {'create': dataset_add,
                'ping': ping,
                'whoami_account': whoami_account,
                'download': download,
                'upload': upload,
               }

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError,
             NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
