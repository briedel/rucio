#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2012

"""
    Rucio CLI.
"""

import argparse
import itertools
import os
import sys
import time


from rucio import client as rucio_client
from rucio import version
from rucio.client.accountclient import AccountClient
from rucio.client.datasetclient import DatasetClient
from rucio.client.dataidentifierclient import DataIdentifierClient
from rucio.client.pingclient import PingClient
from rucio.client.rseclient import RSEClient
from rucio.client.cli.upload import upload as cli_upload
from rucio.client.cli.download import download as cli_download


SUCCESS = 0
FAILURE = 1

DEFAULT_SECURE_PORT = 443
DEFAULT_PORT = 80


def get_client(args):
    """
    Returns a new client object.
    specified by the --host and --port options
    supplied to the CLI
    """
    return rucio_client.Client(host="0.0.0.0")


def ping(args):
    """

    Pings a Rucio server.

    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = PingClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.account,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)

    server_info = client.ping()
    if server_info:
        print server_info['version']
        return SUCCESS
    print 'Ping failed'
    return FAILURE


def whoami_account(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Show extended information of a given account

    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        info = accountClient.whoami()
    except Exception, e:
            print 'Failed to show account'
            print e
            return FAILURE

    for k in info:
        print k.ljust(10) + ' : ' + str(info[k])

    return SUCCESS


def add_replicas(args):
    """
    %(prog)s add_replicas [options] <field1=value1 field2=value2 ...>

    Add file replicas.
    """
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    # lfns = [('lfn', lfn) for lfn in args.lfns]
    # rses = [('rse', rse) for rse in args.rses]
    # checksums = [('checksum', checksum) for checksum in args.checksums]
    # sizes = [('size', size) for size in args.sizes]
    # files = [dict(i) for i in itertools.izip_longest(lfns, rses, sizes, checksums)]

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    for lfn, rse, checksum, size in zip(args.lfns, args.rses, args.checksums, args.sizes):
        try:
            scope, name = lfn.split(':')
            client.add_file_replica(scope=scope, name=name, rse=rse, checksum=checksum, size=size)
            print 'Added file replica %(lfn)s at %(rse)s' % locals()
        except Exception, e:
            print 'Failed to add file replica %(lfn)s at %(rse)s' % locals()
            print e
    return SUCCESS


def add_file(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Add file.

    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope = args.scope
    lfn = args.lfn
    if scope is None:
        if args.lfn.find(':') == -1:
            print 'Error: Cannot extract scope from %s (notation: scope:file_name) !' % args.lfn
            return FAILURE
        scope, lfn = args.lfn.split(':')

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_file(rse=args.rse, scope=scope, lfn=lfn)
        print 'Added new file replica: %s-%s' % (args.rse, args.lfn)
    except Exception, e:
            print 'Failed to add file replica'
            print e
            return FAILURE
    return SUCCESS


def list_replicas(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List file replicas

    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)


    for data_id in args.data_ids:
        try:
            scope, name = data_id.split(':')
            replicas = client.list_replicas(scope=scope, name=name)
            for replica in replicas:
                rses = [r['rse'] for r in replicas[replica] if 'rse' in r]
                rses = ','.join(rses)
                print '%(replica)s: %(rses)s' % locals()
        except Exception, e:
            print 'Failed to list file replicas for %(data_id)s' % locals()
            print e


def add(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Add dataset/container.

    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope, name = args.data_id.split(':')
    sources = [{'scope': src.split(':')[0], 'name': src.split(':')[1]} for src in args.sources]

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    client.add(scope=scope, name=name, sources=sources)
#
#     try:
#         client.add_dataset(scope=scope, dsn=dsn)
#         print 'Added new dataset: %s:%s' % (scope, dsn)
#     except Exception, e:
#             print 'Failed to add dataset'
#             print e
#             return FAILURE
#     return SUCCESS


def add_files_to_dataset(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Add files to dataset

    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope = args.scope
    dsn = args.dsn
    if scope is None:
        if args.dsn.find(':') == -1:
            print 'Error: Cannot extract scope from %s (notation: scope:dataset_name) !' % args.dsn
            return FAILURE
        scope, dsn = args.dsn.split(':')
    lfns = list()
    for lfn in args.lfns:
        lfns.append(lfn.split(':'))

    client = DatasetClient(rucio_host=args.host, auth_host=args.auth_host,
                           account=args.account,
                           auth_type=args.auth_strategy, creds=creds,
                           ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        report = client.add_files_to_dataset(scope=scope, dsn=dsn, lfns=lfns)
    except Exception, e:
            print 'Failed to add files to dataset'
            print e
            return FAILURE

    return SUCCESS


def list_files_in_dataset(args):
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope = args.scope
    dsn = args.dsn
    if scope is None:
        if args.dsn.find(':') == -1:
            print 'Error: Cannot extract scope from %s (notation: scope:dataset_name) !' % args.dsn
            return FAILURE
        scope, dsn = args.dsn.split(':')

    client = DatasetClient(rucio_host=args.host,
                           auth_host=args.auth_host,
                           account=args.account,
                           auth_type=args.auth_strategy, creds=creds,
                           ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        files = client.list_files_in_dataset(scope=scope, dsn=dsn)
    except Exception, e:
            print 'Failed to list files in dataset'
            print e
            return FAILURE

    for scope, lfn in files:
        print '%(scope)s:%(lfn)s' % locals()

    return SUCCESS


def close_dataset(args):
    """
    %(prog)s close [options] <field1=value1 field2=value2 ...>

    Close dataset

    """
    raise NotImplementedError


def upload(args):
    """
    %(prog)s upload [options] <field1=value1 field2=value2 ...>

    Upload files into Rucio

    """
    cli_upload


def download(args):
    """
    %(prog)s download [options] <field1=value1 field2=value2 ...>

    Download files from Rucio

    """
    cli_download


if __name__ == '__main__':
    usage = """
usage: %(prog)s <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=False)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', dest="host", metavar="ADDRESS", help="The Rucio API host." "Default: %default")
    oparser.add_argument('--auth_host', dest="auth_host", metavar="ADDRESS", help="The Rucio Authentication host." "Default: %default")
    oparser.add_argument('--account', dest="account", metavar="ACCOUNT", help="Rucio account to use. " "Default: %default")
    oparser.add_argument('--auth_strategy', dest="auth_strategy", default=None, help="Authentication strategy (userpass or x509 or ...)")
    oparser.add_argument('--timeout=', dest="timeout", type=float, default=None, help="Set all timeout values to SECONDS")

    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')

    # Options for the x509  auth_strategy
    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca_certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # Ping command
    ping_parser = subparsers.add_parser('ping', help='Ping Rucio server')
    ping_parser.set_defaults(which='ping')

    # The whoami command
    whoami_parser = subparsers.add_parser('whoami', help='Get information about account whose token is used')
    whoami_parser.set_defaults(which='whoami_account')

    # The add_replicas command
    add_replicas_parser = subparsers.add_parser('add-replicas', help='Add file replicas')
    add_replicas_parser.set_defaults(which='add_replicas')
    add_replicas_parser.add_argument('--lfns', dest='lfns', nargs='+', action='store', help='List of space separated LFNs', required=True)
    add_replicas_parser.add_argument('--rses', dest='rses', nargs='+', action='store', help='List of space separated Rucio Storage Element(RSE)', required=True)
    add_replicas_parser.add_argument('--sizes', dest='sizes', nargs='+', action='store', help='List of space separated file sizes', required=True)
    add_replicas_parser.add_argument('--checksums', dest='checksums', nargs='+', action='store', help='List of space separated file checksums', required=True)

    # The list_replicas command
    list_replicas_parser = subparsers.add_parser('list-replicas', help='List file replicas')
    list_replicas_parser.set_defaults(which='list_replicas')
    list_replicas_parser.add_argument(dest='data_ids', nargs='+', action='store', help='List of space separated data_ids')

    # The add command
    add_parser = subparsers.add_parser('add', help='Add container/dataset')
    add_parser.set_defaults(which='add')
    add_parser.add_argument('--dest', dest='data_id', action='store', help='Container/dataset name to create', required=True)
    add_parser.add_argument('--srcs',dest='sources', nargs='+', action='store', help='List of space separated data_ids', required=True)
    #meta

    # The upload subparser
    upload_parser = subparsers.add_parser('upload', help='Upload method')
    upload_parser.set_defaults(which='upload')

    # The download subparser
    download_parser = subparsers.add_parser('download', help='Download method')
    download_parser.set_defaults(which='download')

# The file subparser
#     file_parser = subparsers.add_parser('file', help='File methods')
#     file_subparser = file_parser.add_subparsers()
#
#      # The add_file command
#     add_file_parser = file_subparser.add_parser('add', help='Add file')
#     add_file_parser.set_defaults(which='add_file')
#     add_file_parser.add_argument('lfn', action='store', help='File name')
#     add_file_parser.add_argument('rse', action='store', help='RSE name')
#     add_file_parser.add_argument('-s', '--scope', dest='scope', default=None, help='Scope')
#
# The replica subparser
#     replica_parser = subparsers.add_parser('replica', help='Replica methods')
#     replica_subparser = replica_parser.add_subparsers()
#
# The list replica command
#     list_replica_parser = replica_subparser.add_parser('list', help='List replica')
#     list_replica_parser.set_defaults(which='list_replicas')
#     list_replica_parser.add_argument('lfn', action='store', help='File name')
#     list_replica_parser.add_argument('-s', '--scope', dest='scope', default=None, help='Scope')
#
# The dataset subparser
#     dataset_parser = subparsers.add_parser('dataset', help='Dataset methods')
#     dataset_subparser = dataset_parser.add_subparsers()
#
# The dataset_add command
#     add_dataset_parser =  dataset_subparser.add_parser('add', help='Add dataset')
#     add_dataset_parser.set_defaults(which='add_dataset')
#     add_dataset_parser.add_argument('dsn', action='store', help='Dataset name')
#     add_dataset_parser.add_argument('-s', '--scope', dest='scope', default=None, help='Scope')
#
# The close_add command
#     close_dataset_parser =  dataset_subparser.add_parser('close', help='Close dataset')
#     close_dataset_parser.set_defaults(which='close_dataset')
#     close_dataset_parser.add_argument('dsn', action='store', help='Dataset name')
#     close_dataset_parser.add_argument('-s', '--scope', dest='scope', default=None, help='Scope')
#
# The dataset file subparser
#     dataset_file_parser = dataset_subparser.add_parser('file', help='Dataset file methods')
#     dataset_file_subparser = dataset_file_parser.add_subparsers()
#
# The add_files_to_dataset command
#     add_dataset_file_parser = dataset_file_subparser.add_parser('add', help='Add files to dataset')
#     add_dataset_file_parser.set_defaults(which='add_files_to_dataset')
#     add_dataset_file_parser.add_argument('dsn', action='store', help='Dataset name')
#     add_dataset_file_parser.add_argument('lfns', type=str, nargs='+', action='store', help='List of filenames')
#     add_dataset_file_parser.add_argument('-s', '--scope', dest='scope', default=None, help='Scope')
#
# The list_dataset_files command
#     list_dataset_files_parser = dataset_file_subparser.add_parser('list', help='List files in dataset')
#     list_dataset_files_parser.set_defaults(which='list_files_in_dataset')
#     list_dataset_files_parser.add_argument('dsn', action='store', help='Dataset name')
#     list_dataset_files_parser.add_argument('-s', '--scope', dest='scope', default=None, help='Scope')

    args = oparser.parse_args(sys.argv[1:])

    commands = {'ping': ping,
                'add_replicas': add_replicas,
                'list_replicas': list_replicas,
                'add': add,
                'whoami_account': whoami_account,
                'download': download,
                'upload': upload}

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError, NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
