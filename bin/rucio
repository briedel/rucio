#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012

"""
    Rucio CLI.
"""

import functools
import gettext
import argparse
import os
import sys
import time

from urlparse import urlparse

from rucio import client as rucio_client
from rucio import version

SUCCESS = 0
FAILURE = 1


def get_client(args):
    """
    Returns a new client object.
    specified by the --host and --port options
    supplied to the CLI
    """
    return rucio_client.Client(host="0.0.0.0")


def dataset_add(args):
    """
%(prog)s add [options] <field1=value1 field2=value2 ...>

Adds a new dataset. Specify metadata fields as arguments.

    """
    c = get_client(args)
    #args.dataset
    c.add_dataset()
    return SUCCESS


if __name__ == '__main__':
    usage = """
usage: %(prog)s <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), usage=usage.strip())
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")

    # A list command
    list_parser = subparsers.add_parser('list', help='List contents')
    list_parser.set_defaults(which='list')
    list_parser.add_argument('dataset', action='store', help='list')

    # A create command
    create_parser = subparsers.add_parser('create', help='Create a dataset')
    create_parser.set_defaults(which='create')
    create_parser.add_argument('dataset',  action='store', help='New dataset to create')

    # A delete command
    delete_parser = subparsers.add_parser('delete', help='Remove a dataset')
    delete_parser.set_defaults(which='delete')
    delete_parser.add_argument('dataset', action='store', help='The dataset to remove')

    args = oparser.parse_args(sys.argv[1:])
    print args

    commands = {'create': dataset_add,
               }

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError,
             NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
