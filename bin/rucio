#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2012

"""
    Rucio CLI.
"""

import argparse
import itertools
import os
import sys
import time


from rucio import client
from rucio import version
from rucio.client.accountclient import AccountClient
from rucio.client.cli.download import download
from rucio.client.cli.upload import upload
from rucio.client.dataidentifierclient import DataIdentifierClient
from rucio.client.pingclient import PingClient
from rucio.client.rseclient import RSEClient
from rucio.common.utils import adler32
from rucio.rse import rsemanager

SUCCESS = 0
FAILURE = 1

DEFAULT_SECURE_PORT = 443
DEFAULT_PORT = 80


def get_client(args):
    """
    Returns a new client object.
    specified by the --host and --port options
    supplied to the CLI
    """

    return client.Client(host="0.0.0.0")


def ping(args):
    """
    Pings a Rucio server.
    """

    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = PingClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.account,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)

    server_info = client.ping()
    if server_info:
        print server_info['version']
        return SUCCESS
    print 'Ping failed'
    return FAILURE


def whoami_account(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Show extended information of a given account
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        info = accountClient.whoami()
    except Exception, e:
            print 'Failed to show account'
            print e
            return FAILURE

    for k in info:
        print k.ljust(10) + ' : ' + str(info[k])

    return SUCCESS


def add_replicas(args):
    """
    %(prog)s add_replicas [options] <field1=value1 field2=value2 ...>

    Add file replicas.
    """

    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    # lfns = [('lfn', lfn) for lfn in args.lfns]
    # rses = [('rse', rse) for rse in args.rses]
    # checksums = [('checksum', checksum) for checksum in args.checksums]
    # sizes = [('size', size) for size in args.sizes]
    # files = [dict(i) for i in itertools.izip_longest(lfns, rses, sizes, checksums)]

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    dsn = None
    if args.did:
        dsn = {'scope': args.did.split(':')[0], 'did': args.did.split(':')[1]}
    for lfn, rse, checksum, size in zip(args.lfns, args.rses, args.checksums, args.sizes):
        try:
            scope, did = lfn.split(':')
            client.add_file_replica(scope=scope, did=did, rse=rse, checksum=checksum, size=size, dsn=dsn)
            print 'Added file replica %(lfn)s at %(rse)s' % locals()
        except Exception, e:
            print 'Failed to add file replica %(lfn)s at %(rse)s' % locals()
            print e
    return SUCCESS


def add_file(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Add file.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope = args.scope
    lfn = args.lfn
    if scope is None:
        if args.lfn.find(':') == -1:
            print 'Error: Cannot extract scope from %s (notation: scope:filename) !' % args.lfn
            return FAILURE
        scope, lfn = args.lfn.split(':')

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_file(rse=args.rse, scope=scope, lfn=lfn)
        print 'Added new file replica: %s-%s' % (args.rse, args.lfn)
    except Exception, e:
            print 'Failed to add file replica'
            print e
            return FAILURE
    return SUCCESS


def list_replicas(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List file replicas
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)


    for did in args.dids:
        try:
            scope, did = did.split(':')
            replicas = client.list_replicas(scope=scope, did=did)
            for replica in replicas:
                print '%(rse)s\t%(checksum)s\t%(size)s\t%(pfn)s' % replica
        except Exception, e:
            print 'Failed to list file replicas for %(scope):%(did)s'
            print e


def add(args):
    """
    %(prog)s add [options] <field1=value1 field2=value2 ...>

    Add data identifier.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope, did = args.did.split(':')
    sources = [{'scope': src.split(':')[0], 'did': src.split(':')[1]} for src in args.sources]

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_identifier(scope=scope, did=did, sources=sources)
        print 'Added %s:%s' % (scope, did)
    except Exception, e:
        print 'Failed to add data identifier'
        print e
        return FAILURE
    return SUCCESS


def list(args):
    """
    %(prog)s list <did_1> ... <did_n>

    List data identifier contents.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    for did in args.dids:
        try:
            scope, did = did.split(':')
            dids = client.list_content(scope=scope, did=did)
            for d in dids:
                print '%(scope)s:%(did)s' % d
        except Exception, e:
            print e

    return SUCCESS

def scope_list(args):
    """
    %(prog)s scope_list <scope_name>

    List all data identifiers in given scope.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        dids = client.scope_list(scope=args.scope)
        for d in dids:
            print '%(scope)s:%(did)s [%(type)s]' % d
    except Exception, e:
        print e
        return FAILURE

    return SUCCESS


def list_files(args):
    """
    %(prog)s list-files [options] <field1=value1 field2=value2 ...>

    List data identifier contents.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    for did in args.dids:
        try:
            scope, did = did.split(':')
            files = client.list_files(scope=scope, did=did)
            for file in files:
                print '%(scope)s:%(did)s' % file # %(size)s\t%(checksum)s
        except Exception, e:
            print e

    return SUCCESS


def close(args):
    """
    %(prog)s close [options] <field1=value1 field2=value2 ...>

    Close data identifier.
    """

    raise NotImplementedError

def delete(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Delete data identifier.
    """
    raise NotImplementedError

def upload(args):
    """
    %(prog)s upload [options] <field1=value1 field2=value2 ...>

    Upload files into Rucio
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    dsn = None
    if args.did:
        dsn = {'scope': args.scope, 'did': args.did}

    rsemgr = rsemanager.RSEMgr()
    files = args.files
    for filename in files:
        try:
            size = os.stat(filename).st_size
            checksum = adler32(filename)
            client.add_file_replica(scope=args.scope, did=filename, rse=args.rse, checksum=checksum, size=size, dsn=dsn)
            rsemgr.upload(args.rse, lfns=[{'filename':filename, 'scope': args.scope},])
            print 'download operation for %s done' % filename
        except Exception, e:
            print 'Failed to download %(file)s' % locals()
            print e


def download(args):
    """
    %(prog)s download [options] <field1=value1 field2=value2 ...>

    Download files from Rucio
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DataIdentifierClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    rsemgr = rsemanager.RSEMgr()
    for did in args.dids:
        try:
            scope, did = did.split(':')
            files = client.list_replicas(scope=scope, did=did)
            for file in files:
                for replica in files[file]:
                    rsemgr.download(rse_id=replica['rse'], files={'lfns': [{'filename': did, 'scope': scope},]},  dest_dir=args.dir)
                    break
            print 'download operation for %s done' % (did)
        except Exception, e:
            print 'Failed to download %(did)s' % locals()
            print e



if __name__ == '__main__':
    usage = """
usage: %(prog)s <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=False)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', dest="host", metavar="ADDRESS", help="The Rucio API host." "Default: %default")
    oparser.add_argument('--auth_host', dest="auth_host", metavar="ADDRESS", help="The Rucio Authentication host." "Default: %default")
    oparser.add_argument('--account', dest="account", metavar="ACCOUNT", help="Rucio account to use. " "Default: %default")
    oparser.add_argument('--auth_strategy', dest="auth_strategy", default=None, help="Authentication strategy (userpass or x509 or ...)")
    oparser.add_argument('--timeout', dest="timeout", type=float, default=None, help="Set all timeout values to SECONDS")

    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')

    # Options for the x509  auth_strategy
    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca_certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # Ping command
    ping_parser = subparsers.add_parser('ping', help='Ping Rucio server')
    ping_parser.set_defaults(which='ping')

    # The whoami command
    whoami_parser = subparsers.add_parser('whoami', help='Get information about account whose token is used')
    whoami_parser.set_defaults(which='whoami_account')

    # The add_replicas command
    add_replicas_parser = subparsers.add_parser('add-replicas', help='Add file replicas')
    add_replicas_parser.set_defaults(which='add_replicas')
    add_replicas_parser.add_argument('--lfns', dest='lfns', nargs='+', action='store', help='List of space separated LFNs', required=True)
    add_replicas_parser.add_argument('--rses', dest='rses', nargs='+', action='store', help='List of space separated Rucio Storage Element(RSE)', required=True)
    add_replicas_parser.add_argument('--sizes', dest='sizes', nargs='+', action='store', help='List of space separated file sizes', required=True)
    add_replicas_parser.add_argument('--checksums', dest='checksums', nargs='+', action='store', help='List of space separated file checksums', required=True)
    add_replicas_parser.add_argument('--did', dest='did', default=None, action='store', help='Data identifier to create')

    # The list_replicas command
    list_replicas_parser = subparsers.add_parser('list-replicas', help='List file replicas')
    list_replicas_parser.set_defaults(which='list_replicas')
    list_replicas_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The add command
    add_parser = subparsers.add_parser('add', help='Add data identifier')
    add_parser.set_defaults(which='add')
    add_parser.add_argument('--dest', dest='did', action='store', help='Data identifier to create', required=True)
    add_parser.add_argument('--srcs',dest='sources', nargs='+', action='store', help='List of space separated data identifiers', required=True)
    # ToDo: add meta

    # The list command
    list_parser = subparsers.add_parser('list', help='List data identifier contents')
    list_parser.set_defaults(which='list')
    list_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The scope_list command
    scope_list_parser = subparsers.add_parser('scope_list', help='List data identifiers in a scope')
    scope_list_parser.set_defaults(which='scope_list')
    scope_list_parser.add_argument('--scope', dest='scope', default=None, action='store', help='Scope name', required=True)


    # The close command
    close_parser = subparsers.add_parser('close', help='Close data identifier')
    close_parser.set_defaults(which='close')
    close_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The del command
    del_parser = subparsers.add_parser('del', help='Delete data identifier')
    del_parser.set_defaults(which='del')
    del_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')
    del_parser.add_argument('--from',dest='from', action='store', help='Target data identifier')

    # The list_files command
    list_files_parser = subparsers.add_parser('list-files', help='List data identifier contents')
    list_files_parser.set_defaults(which='list_files')
    list_files_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The upload subparser
    upload_parser = subparsers.add_parser('upload', help='Upload method')
    upload_parser.set_defaults(which='upload')
    upload_parser.add_argument('--files', dest='files', nargs='+', action='store', help='List of space separated files', required=True)
    upload_parser.add_argument('--rse', dest='rse', action='store', help='Rucio Storage Element (RSE) name', required=True)
    upload_parser.add_argument('--scope', dest='scope', action='store', help='Scope name', required=True) # to be optional after
    upload_parser.add_argument('--did', dest='did', action='store', help='Data identifier to create')

    # The download subparser
    download_parser = subparsers.add_parser('download', help='Download method')
    download_parser.set_defaults(which='download')
    download_parser.add_argument('--dir', dest='dir', default='.', action='store', help='The directory to store the downloaded file.')
    download_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The get-metadata subparser
    get_metadata_parser = subparsers.add_parser('get-metadata', help='get-metadata method')
    get_metadata_parser.set_defaults(which='get_metadata')

    # The set-metadata subparser
    set_metadata_parser = subparsers.add_parser('set-metadata', help='set-metadata method')
    set_metadata_parser.set_defaults(which='set_metadata')

    # The del-metadata subparser
    del_metadata_parser = subparsers.add_parser('del-metadata', help='del-metadata method')
    del_metadata_parser.set_defaults(which='del_metadata')

    # The search subparser
    search_parser = subparsers.add_parser('search', help='Search method')
    search_parser.set_defaults(which='search')

    # The list-rse-usage subparser
    list_rse_usage_parser = subparsers.add_parser('list-rse-usage', help='list-rse-usage method')
    list_rse_usage_parser.set_defaults(which='list_rse_usage')
    list_rse_usage_parser.add_argument(dest='rse', action='store', help='Rucio Storage Element (RSE) name')
    list_rse_usage_parser.add_argument('--history', dest='history', default=False, action='store', help='List rse usage history')

    # The list-account-usage subparser
    list_account_usage_parser = subparsers.add_parser('list-account-usage', help='list-account-usage method')
    list_account_usage_parser.set_defaults(which='list_account_usage')
    list_account_usage_parser.add_argument(dest='account', action='store', help='Account name')
    list_account_usage_parser.add_argument('--history', dest='history', default=False, action='store', help='List account usage history')

    # The list-account-limits subparser
    list_account_limits_parser = subparsers.add_parser('list-account-limits', help='list-account-limits method')
    list_account_limits_parser.set_defaults(which='list_account_limits')
    list_account_limits_parser.add_argument(dest='account', action='store', help='Account name')

    args = oparser.parse_args(sys.argv[1:])

    commands = {'ping': ping,
                'add_replicas': add_replicas,
                'list_replicas': list_replicas,
                'add': add,
                'list': list,
                'list_files': list_files,
                'scope_list': scope_list,
                'close' : close,
                'del' : delete,
                'whoami_account': whoami_account,
                'download': download,
                'upload': upload}

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError, NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
