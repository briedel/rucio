#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012-2013
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2012-2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2012
# - Yun-Pin Sun, <yun-pin.sun@cern.ch>, 2013
# - Cedric Serfon <cedric.serfon@cern.ch>, 2013

"""
    Rucio CLI.
"""

import argcomplete
import argparse
import os
import sys
import time


from rucio import client
from rucio import version
from rucio.client.accountclient import AccountClient
from rucio.client.didclient import DIDClient
from rucio.client.metaclient import MetaClient
from rucio.client.pingclient import PingClient
from rucio.client.rseclient import RSEClient
from rucio.client.ruleclient import RuleClient
from rucio.client.scopeclient import ScopeClient
from rucio.client.subscriptionclient import SubscriptionClient
from rucio.common.utils import adler32
from rucio.rse import rsemanager

SUCCESS = 0
FAILURE = 1

DEFAULT_SECURE_PORT = 443
DEFAULT_PORT = 80


def get_client(args):
    """
    Returns a new client object.
    specified by the --host and --port options
    supplied to the CLI
    """

    return client.Client(host="0.0.0.0")


def ping(args):
    """
    Pings a Rucio server.
    """

    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = PingClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.account,
                        auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)

    server_info = client.ping()
    if server_info:
        print server_info['version']
        return SUCCESS
    print 'Ping failed'
    return FAILURE


def whoami_account(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Show extended information of a given account
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    accountClient = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                                  account=args.account,
                                  auth_type=args.auth_strategy, creds=creds,
                                  ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        info = accountClient.whoami()
    except Exception, e:
            print 'Failed to show account'
            print e
            return FAILURE

    for k in info:
        print k.ljust(10) + ' : ' + str(info[k])

    return SUCCESS


def add_replicas(args):
    """
    %(prog)s add_replicas [options] <field1=value1 field2=value2 ...>

    Add file replicas.
    """

    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}
    else:
        creds = None

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    for lfn, rse, checksum, bytes in zip(args.lfns, args.rses, args.checksums, args.bytes):
        try:
            scope, name = lfn.split(':')
            client.add_replica(scope=scope, name=name, rse=rse, adler32=checksum, bytes=long(bytes))
            print 'Added file replica %(lfn)s at %(rse)s' % locals()
        except Exception, e:
            print 'Failed to add file replica %(lfn)s at %(rse)s' % locals()
            print e
    return SUCCESS


def add_file(args):
    """
    %(prog)s show [options] <field1=value1 field2=value2 ...>

    Add file.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope = args.scope
    lfn = args.lfn
    if scope is None:
        if args.lfn.find(':') == -1:
            print 'Error: Cannot extract scope from %s (notation: scope:filename) !' % args.lfn
            return FAILURE
        scope, lfn = args.lfn.split(':')

    client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account,
                       auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_file(rse=args.rse, scope=scope, lfn=lfn)
        print 'Added new file replica: %s-%s' % (args.rse, args.lfn)
    except Exception, e:
            print 'Failed to add file replica'
            print e
            return FAILURE
    return SUCCESS


def list_replicas(args):
    """
    %(prog)s list [options] <field1=value1 field2=value2 ...>

    List file replicas
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    protocols = None
    if args.protocols:
        protocols = args.protocols.split(',')

    for did in args.dids:
        try:
            scope, name = did.split(':')
            replicas = client.list_replicas(scope=scope, name=name, protocols=protocols)
            for replica in replicas:
                print '%(rse)s\t%(adler32)s\t%(size)s\t%(pfns)s' % replica
        except Exception, e:
            print 'Failed to list file replicas for %(scope)s:%(name)s' % locals()
            print e


def add(args):
    """
    %(prog)s add [options] <did>

    Add a data identifier.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope, name = args.did.split(':')

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        if args.dataset:
            client.add_dataset(scope=scope, name=name, statuses={'monotonic': args.monotonic})
        elif args.container:
            client.add_container(scope=scope, name=name, statuses={'monotonic': args.monotonic})
        print 'Added %s:%s' % (scope, name)
    except Exception, e:
        print 'Failed to add data identifier'
        print e
        return FAILURE
    return SUCCESS


def add_dataset(args):
    """
    %(prog)s add-dataset [options] <dsn>

    Add a dataset identifier.
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope, name = args.did.split(':')

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_dataset(scope=scope, name=name, statuses={'monotonic': args.monotonic})
        print 'Added %s:%s' % (scope, name)
    except Exception, e:
        print 'Failed to add data identifier'
        print e
        return FAILURE
    return SUCCESS


def add_container(args):
    """
    %(prog)s add-container [options] <dsn>

    Add a container identifier.
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    scope, name = args.did.split(':')

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.add_container(scope=scope, name=name, statuses={'monotonic': args.monotonic})
        print 'Added %s:%s' % (scope, name)
    except Exception, e:
        print 'Failed to add data identifier'
        print e
        return FAILURE
    return SUCCESS


def attach(args):
    """
    %(prog)s detach [options] <field1=value1 field2=value2 ...>

    Attach data identifier.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        dids = [{'scope': did.split(':')[0], 'name': did.split(':')[1]} for did in args.dids]
        scope, name = args.todid.split(':')
    except Exception, e:
        print e

    try:
        client.attach_dids(scope=scope, name=name, dids=dids)
    except Exception, e:
        print 'Failed to attach data identifier'
        print e
        return FAILURE
    return SUCCESS


def detach(args):
    """
    %(prog)s detach [options] <field1=value1 field2=value2 ...>

    Detach data identifier.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        dids = [{'scope': did.split(':')[0], 'name': did.split(':')[1]} for did in args.dids]
        scope, name = args.fromdid.split(':')
    except Exception, e:
        print e

    try:
        client.detach_dids(scope=scope, name=name, dids=dids)
    except Exception, e:
        print 'Failed to detach data identifier'
        print e
        return FAILURE
    return SUCCESS


def list(args):
    """
    %(prog)s list <did_1> ... <did_n>

    List data identifier contents.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    if not args.dids:
        if not args.scope:  # list scopes
            client = ScopeClient(rucio_host=args.host, auth_host=args.auth_host,
                                 account=args.account,
                                 auth_type=args.auth_strategy, creds=creds,
                                 ca_cert=args.ca_certificate, timeout=args.timeout)
            try:
                scopes = client.list_scopes()
                for scope in scopes:
                    print scope
            except Exception, e:
                print 'Failed to list scopes'
                print e
                return FAILURE
        else:  # list dids in a scope
            client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                               account=args.account, auth_type=args.auth_strategy, creds=creds,
                               ca_cert=args.ca_certificate, timeout=args.timeout)

            try:
                dids = client.scope_list(scope=args.scope, recursive=args.recursive)
                for d in dids:
                    if d['level'] == 0:
                        print '%(scope)s:%(name)s [%(type)s]' % d
                    else:
                        print '|    ' * d['level'] + '|- %(scope)s:%(name)s [%(type)s]' % d
            except Exception, e:
                print e
                return FAILURE
    else:
        client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                           account=args.account, auth_type=args.auth_strategy, creds=creds,
                           ca_cert=args.ca_certificate, timeout=args.timeout)
        for did in args.dids:
            try:
                scope, name = did.split(':')
                dids = client.scope_list(scope=scope, name=name, recursive=args.recursive)
                for d in dids:
                    if d['level'] == 0:
                        print '%(scope)s:%(name)s [%(type)s]' % d
                    else:
                        print '|    ' * d['level'] + '|- %(scope)s:%(name)s [%(type)s]' % d
            except Exception, e:
                print e

    return SUCCESS


def list_scopes(args):
    """
    %(prog)s list-scopes <scope>

    List scopes.
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = ScopeClient(rucio_host=args.host, auth_host=args.auth_host,
                         account=args.account,
                         auth_type=args.auth_strategy, creds=creds,
                         ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        scopes = client.list_scopes()
    except Exception, e:
            print 'Failed to list scopes'
            print e
            return FAILURE

    for scope in scopes:
        print scope

    return SUCCESS


def scope_list(args):
    """
    %(prog)s scope_list <scope>

    List all data identifiers in given scope.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        dids = client.scope_list(scope=args.scope)
        for d in dids:
            print '%(scope)s:%(name)s [%(type)s]' % d
    except Exception, e:
        print e
        return FAILURE

    return SUCCESS


def list_files(args):
    """
    %(prog)s list-files [options] <field1=value1 field2=value2 ...>

    List data identifier contents.
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    for did in args.dids:
        try:
            scope, name = did.split(':')
            for file in client.list_files(scope=scope, name=name):
                print '%(scope)s:%(name)s' % file  # %(size)s\t%(checksum)s
        except Exception, e:
            print e

    return SUCCESS


def close(args):
    """
    %(prog)s close [options] <field1=value1 field2=value2 ...>

    Close data identifier.
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    for did in args.dids:
        try:
            scope, name = did.split(':')
            client.set_status(scope=scope, name=name, open=False)
            print '%(scope)s:%(name)s has been closed.' % locals()
        except Exception, e:
            print e

    return SUCCESS


def stat(args):
    """
    %(prog)s stat [options] <field1=value1 field2=value2 ...>

    List attributes and statuses about data identifiers..
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)
    for did in args.dids:
        try:
            scope, name = did.split(':')
            info = client.get_did(scope=scope, name=name)
            for k, v in info.iteritems():
                print '%(k)s: %(v)s' % locals()
        except Exception, e:
            print e

    return SUCCESS


def delete(args):
    """
    %(prog)s del [options] <field1=value1 field2=value2 ...>

    Delete data identifier.
    """
    raise NotImplementedError


def upload(args):
    """
    %(prog)s upload [options] <field1=value1 field2=value2 ...>

    Upload files into Rucio
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    dsn = None
    if args.did:
        dsn = {'scope': args.did.split(':')[0], 'name': args.did.split(':')[1]}
        client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                           account=args.account, auth_type=args.auth_strategy, creds=creds,
                           ca_cert=args.ca_certificate, timeout=args.timeout)
    else:
        client = RSEClient(rucio_host=args.host, auth_host=args.auth_host,
                           account=args.account, auth_type=args.auth_strategy, creds=creds,
                           ca_cert=args.ca_certificate, timeout=args.timeout)
        ruleclient = RuleClient(rucio_host=args.host, auth_host=args.auth_host,
                                account=args.account, auth_type=args.auth_strategy, creds=creds,
                                ca_cert=args.ca_certificate, timeout=args.timeout)

    rsemgr = rsemanager.RSEMgr()
    files = args.files
    list_files = []
    lfns = []
    for filename in files:
        size = os.stat(filename).st_size
        checksum = adler32(filename)
        list_files.append({'scope': args.scope, 'name': filename, 'bytes': size, 'adler32': checksum})
        lfns.append({'name': filename, 'scope': args.scope})

    metadata = {}
    if args.project:
        metadata['project'] = args.project
    if args.datatype:
        metadata['datatype'] = args.datatype
    if args.run_number:
        metadata['run_number'] = args.run_number
    if args.stream_name:
        metadata['stream_name'] = args.stream_name
    if args.prod_step:
        metadata['prod_step'] = args.prod_step
    if args.version:
        metadata['version'] = args.version
    if args.campaign:
        metadata['campaign'] = args.campaign

    if dsn:
        try:
            client.add_dataset(scope=dsn['scope'], name=dsn['name'], rules=[{'account': args.account, 'copies': 1, 'rse_expression': args.rse, 'grouping': 'DATASET'}], meta=metadata)
            client.add_files_to_dataset(scope=dsn['scope'], name=dsn['name'], files=list_files, rse=args.rse)
            rsemgr.upload(args.rse, lfns=lfns)
            print 'Upload operation for %s done' % filename
        except Exception, e:
            print 'Failed to upload %(files)s' % locals()
            print e
    else:
        try:
            client.add_replicas(files=list_files, rse=args.rse)
            ruleclient.add_replication_rule(list_files, copies=1, rse_expression=args.rse)
            rsemgr.upload(args.rse, lfns=lfns)
            print 'Upload operation for %s done' % filename
        except Exception, e:
            print 'Failed to upload %(files)s' % locals()
            print e


def download(args):
    """
    %(prog)s download [options] <field1=value1 field2=value2 ...>

    Download files from Rucio
    """

    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    rsemgr = rsemanager.RSEMgr()
    for did in args.dids:
        try:
            scope, name = did.split(':')
            files = client.list_replicas(scope=scope, name=name)
            for file in files:
                    rsemgr.download(rse_id=file['rse'], files={'lfns': [{'name': name, 'scope': scope}, ]}, dest_dir=args.dir)
                    break
            print 'download operation for %s done' % (name)
        except Exception, e:
            print 'Failed to download %(name)s' % locals()
            print e


def get_metadata(args):
    """
    %(prog)s get_metadata [options] <field1=value1 field2=value2 ...>

    Get data identifier metadata
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    for did in args.dids:
        try:
            scope, name = did.split(':')
            meta = client.get_metadata(scope=scope, name=name)
            for k in meta:
                print '%s: %s' % (k, meta[k])
        except Exception, e:
            print 'Failed to get metadata for %(scope)s:%(name)s' % locals()
            print e


def set_metadata(args):
    """
    %(prog)s set_metadata [options] <field1=value1 field2=value2 ...>

    Set data identifier metadata
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                       account=args.account, auth_type=args.auth_strategy, creds=creds,
                       ca_cert=args.ca_certificate, timeout=args.timeout)

    try:
        client.set_metadata(scope=args.did.split(':')[0], name=args.did.split(':')[1], key=args.key, value=args.value)
    except Exception, e:
            print 'Failed to set metadata'
            print e


def del_metadata(args):
    """
    %(prog)s set_metadata [options] <field1=value1 field2=value2 ...>

    Delete data identifier metadata
    """
    # For the moment..
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    MetaClient(rucio_host=args.host, auth_host=args.auth_host,
               account=args.account,
               auth_type=args.auth_strategy, creds=creds,
               ca_cert=args.ca_certificate, timeout=args.timeout)


def add_rule(args):
    """
    %(prog)s add-rule <did> <copies> <rse-expression> [options]

    Add a rule to a did.
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    dids = []
    for did in args.dids:
        scope, name = did.split(':')
        dids.append({'scope': scope, 'name': name})

    client = RuleClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.account, auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        rule_ids = client.add_replication_rule(dids=dids,
                                               copies=args.copies,
                                               rse_expression=args.rse_expression,
                                               weight=args.weight,
                                               lifetime=args.lifetime,
                                               grouping=args.grouping,
                                               account=args.account,
                                               locked=args.locked)
        for rule in rule_ids:
            print rule
    except Exception, e:
        print 'Failed to add rule to data identifier'
        print e
        return FAILURE
    return SUCCESS


def del_rule(args):
    """
    %(prog)s del-rule [options] <ruleid>

    Delete a rule.
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    client = RuleClient(rucio_host=args.host, auth_host=args.auth_host,
                        account=args.account, auth_type=args.auth_strategy, creds=creds,
                        ca_cert=args.ca_certificate, timeout=args.timeout)
    try:
        client.delete_replication_rule(rule_id=args.rule_id)
        print 'Removed Rule'
    except Exception, e:
        print 'Failed to delete replication rule'
        print e
        return FAILURE
    return SUCCESS


def list_rules(args):
    """
    %(prog)s list-rules ...

    List rules.
    """
    creds = None
    if args.auth_strategy == 'userpass':
        creds = {'username': args.username, 'password': args.password}

    if args.rule_id:
        client = RuleClient(rucio_host=args.host, auth_host=args.auth_host,
                            account=args.account,
                            auth_type=args.auth_strategy, creds=creds,
                            ca_cert=args.ca_certificate, timeout=args.timeout)
        try:
            rules = [client.get_replication_rule(args.rule_id)]
        except Exception, e:
            print 'Failed to list rules'
            print e
            return FAILURE
    elif args.did:
        client = DIDClient(rucio_host=args.host, auth_host=args.auth_host,
                           account=args.account,
                           auth_type=args.auth_strategy, creds=creds,
                           ca_cert=args.ca_certificate, timeout=args.timeout)
        try:
            scope, name = args.did.split(':')
            rules = client.list_did_rules(scope=scope, name=name)
        except Exception, e:
            print 'Failed to list rules'
            print e
            return FAILURE
    elif args.rule_account:
        client = AccountClient(rucio_host=args.host, auth_host=args.auth_host,
                               account=args.account,
                               auth_type=args.auth_strategy, creds=creds,
                               ca_cert=args.ca_certificate, timeout=args.timeout)
        try:
            rules = client.list_account_rules(account=args.rule_account)
        except Exception, e:
            print 'Failed to list rules'
            print e
            return FAILURE
    elif args.subscription:
        account = args.subscription[0]
        name = args.subscription[1]
        client = SubscriptionClient(rucio_host=args.host, auth_host=args.auth_host,
                                    account=args.account,
                                    auth_type=args.auth_strategy, creds=creds,
                                    ca_cert=args.ca_certificate, timeout=args.timeout)
        try:
            rules = client.list_subscription_rules(account=account, name=name)
        except Exception, e:
            print 'Failed to list rules'
            print e
            return FAILURE
    else:
        print 'At least one option has to be given. Use -h to list the options.'
        return FAILURE

    for rule in rules:
        print rule

    return SUCCESS

if __name__ == '__main__':
    usage = """
usage: %(prog)s <command> [options] [args]

Commands:

    help <command>  Output help for one of the commands below

"""
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]), add_help=True)
    subparsers = oparser.add_subparsers()

    # Main arguments
    oparser.add_argument('--version', action='version', version='%(prog)s ' + version.version_string())
    oparser.add_argument('--verbose', '-v', default=False, action='store_true', help="Print more verbose output")
    oparser.add_argument('-H', '--host', dest="host", metavar="ADDRESS", help="The Rucio API host")
    oparser.add_argument('--auth_host', dest="auth_host", metavar="ADDRESS", help="The Rucio Authentication host")
    oparser.add_argument('-a', '--account', dest="account", metavar="ACCOUNT", help="Rucio account to use")
    oparser.add_argument('-S', '--auth_strategy', dest="auth_strategy", default=None, help="Authentication strategy (userpass or x509 or ...)")
    oparser.add_argument('-T', '--timeout', dest="timeout", type=float, default=None, help="Set all timeout values to SECONDS")

    # Options for the userpass auth_strategy
    oparser.add_argument('-u', '--user', dest='username', default=None, help='username')
    oparser.add_argument('-pwd', '--password', dest='password', default=None, help='password')

    # Options for the x509  auth_strategy
    oparser.add_argument('--certificate', dest='certificate', default=None, help='Client certificate file')
    oparser.add_argument('--ca-certificate', dest='ca_certificate', default=None, help='CA certificate to verify peer against (SSL)')

    # Ping command
    ping_parser = subparsers.add_parser('ping', help='Ping Rucio server')
    ping_parser.set_defaults(which='ping')

    # The whoami command
    whoami_parser = subparsers.add_parser('whoami', help='Get information about account whose token is used')
    whoami_parser.set_defaults(which='whoami_account')

    # The add_replicas command
    add_replicas_parser = subparsers.add_parser('add-replicas', help='Add file replicas')
    add_replicas_parser.set_defaults(which='add_replicas')
    add_replicas_parser.add_argument('--lfns', dest='lfns', nargs='+', action='store', help='List of space separated LFNs', required=True)
    add_replicas_parser.add_argument('--rses', dest='rses', nargs='+', action='store', help='List of space separated Rucio Storage Element(RSE)', required=True)
    add_replicas_parser.add_argument('--bytes', dest='bytes', nargs='+', action='store', help='List of space separated file sizes in bytes', required=True)
    add_replicas_parser.add_argument('--checksums', dest='checksums', nargs='+', action='store', help='List of space separated file checksums', required=True)

    # The list_replicas command
    list_replicas_parser = subparsers.add_parser('list-replicas', help='List file replicas')
    list_replicas_parser.set_defaults(which='list_replicas')
    list_replicas_parser.add_argument('--protocols', dest='protocols', action='store', help='List of comma separated protocols', required=False)
    list_replicas_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The add command
    add_parser = subparsers.add_parser('add', help='Add data identifier')
    add_parser.set_defaults(which='add')
    add_parser.add_argument('--monotonic', action='store_true', help='Monotonic status to True')
    group = add_parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--dataset', action='store_true', help='Add dataset')
    group.add_argument('--container', action='store_true', help='Add container')
    add_parser.add_argument(dest='did', action='store', help='Data identifier to add')

    # The add-dataset command
    add_dataset_parser = subparsers.add_parser('add-dataset', help='Add dataset')
    add_dataset_parser.set_defaults(which='add_dataset')
    add_dataset_parser.add_argument('--monotonic', action='store_true', help='Monotonic status to True')
    add_dataset_parser.add_argument(dest='did', action='store', help='Dataset name to add')

    # The add-container command
    add_container_parser = subparsers.add_parser('add-container', help='Add container')
    add_container_parser.set_defaults(which='add_container')
    add_container_parser.add_argument('--monotonic', action='store_true', help='Monotonic status to True')
    add_container_parser.add_argument(dest='did', action='store', help='Container name to add')

    # TODO:
    # delete
    # The list-rses
    #   --rse_expression=<RSE_expression>
    # regexp to validate a rse attribute key / value
    # add meta

    # The attach command
    attach_parser = subparsers.add_parser('attach', help='Attach data identifiers')
    attach_parser.set_defaults(which='attach')
    attach_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')
    attach_parser.add_argument('--to', dest='todid', default=None, action='store', help='Target data identifier', required=True)

    # The detach command
    detach_parser = subparsers.add_parser('detach', help='Detach data identifiers')
    detach_parser.set_defaults(which='detach')
    detach_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')
    detach_parser.add_argument('--from', dest='fromdid', default=None, action='store', help='Target data identifier', required=True)

    # The list command
    list_parser = subparsers.add_parser('list', help='List data identifier contents')
    list_parser.set_defaults(which='list')
    list_parser.add_argument('--scope', dest='scope', action='store', default=None, help='Scope name')
    list_parser.add_argument('--recursive', dest='recursive', action='store_true', default=False, help='List data identifiers recursively')
    list_parser.add_argument('--flat', dest='flat', action='store_true', default=False, help='Flatl (unique) listing')
    list_parser.add_argument('--filter', dest='filter', action='store', help='Filter arguments in form `key=value another_key=next_value`')
    list_parser.add_argument(dest='dids', nargs='*', action='store', default=None, help='List of space separated data identifiers')

    # The list-scopes command
    scope_list_parser = subparsers.add_parser('list-scopes', help='List data identifiers in a scope')
    scope_list_parser.set_defaults(which='list_scopes')

    # The close command
    close_parser = subparsers.add_parser('close', help='Close data identifier')
    close_parser.set_defaults(which='close')
    close_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The stat command
    stat_parser = subparsers.add_parser('stat', help='List attributes and statuses about data identifiers')
    stat_parser.set_defaults(which='stat')
    stat_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The del command
    del_parser = subparsers.add_parser('del', help='Delete data identifier')
    del_parser.set_defaults(which='del')
    del_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')
    del_parser.add_argument('--from', dest='from', default=None, action='store', help='Target data identifier')

    # The list_files command
    list_files_parser = subparsers.add_parser('list-files', help='List data identifier contents')
    list_files_parser.set_defaults(which='list_files')
    list_files_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The upload subparser
    upload_parser = subparsers.add_parser('upload', help='Upload method')
    upload_parser.set_defaults(which='upload')
    upload_parser.add_argument('--files', dest='files', nargs='+', action='store', help='List of space separated files', required=True)
    upload_parser.add_argument('--rse', dest='rse', action='store', help='Rucio Storage Element (RSE) name', required=True)
    upload_parser.add_argument('--scope', dest='scope', action='store', help='Scope name', required=True)  # to be optional after
    upload_parser.add_argument('--did', dest='did', action='store', help='Data identifier to add')
    upload_parser.add_argument('--project', dest='project', action='store', help='Project of the dataset')
    upload_parser.add_argument('--datatype', dest='datatype', action='store', help='Datatype of the dataset')
    upload_parser.add_argument('--run_number', dest='run_number', action='store', help='Run number of the dataset')
    upload_parser.add_argument('--stream_name', dest='stream_name', action='store', help='Stream name of the dataset')
    upload_parser.add_argument('--prod_step', dest='prod_step', action='store', help='Production step of the dataset')
    upload_parser.add_argument('--version', dest='version', action='store', help='Version of the dataset')
    upload_parser.add_argument('--campaign', dest='campaign', action='store', help='Campaign of the dataset')

    # The download subparser
    download_parser = subparsers.add_parser('download', help='Download method')
    download_parser.set_defaults(which='download')
    download_parser.add_argument('--dir', dest='dir', default='.', action='store', help='The directory to store the downloaded file.')
    download_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The get-metadata subparser
    get_metadata_parser = subparsers.add_parser('get-metadata', help='get-metadata method')
    get_metadata_parser.set_defaults(which='get_metadata')
    get_metadata_parser.add_argument(dest='dids', nargs='+', action='store', help='List of space separated data identifiers')

    # The set-metadata subparser
    set_metadata_parser = subparsers.add_parser('set-metadata', help='set-metadata method')
    set_metadata_parser.set_defaults(which='set_metadata')
    set_metadata_parser.add_argument('--scope', dest='scope', action='store', help='Scope name', required=True)  # to be optional after
    set_metadata_parser.add_argument('--did', dest='did', action='store', help='Data identifier to add', required=True)
    set_metadata_parser.add_argument('--key', dest='key', action='store', help='Attribute key', required=True)
    set_metadata_parser.add_argument('--value', dest='value', action='store', help='Attribute value', required=True)

    # The del-metadata subparser
    del_metadata_parser = subparsers.add_parser('del-metadata', help='del-metadata method')
    del_metadata_parser.set_defaults(which='del_metadata')

    # The search subparser
    search_parser = subparsers.add_parser('search', help='Search method')
    search_parser.set_defaults(which='search')

    # The list-rse-usage subparser
    list_rse_usage_parser = subparsers.add_parser('list-rse-usage', help='list-rse-usage method')
    list_rse_usage_parser.set_defaults(which='list_rse_usage')
    list_rse_usage_parser.add_argument(dest='rse', action='store', help='Rucio Storage Element (RSE) name')
    list_rse_usage_parser.add_argument('--history', dest='history', default=False, action='store', help='List rse usage history')

    # The list-account-usage subparser
    list_account_usage_parser = subparsers.add_parser('list-account-usage', help='list-account-usage method')
    list_account_usage_parser.set_defaults(which='list_account_usage')
    list_account_usage_parser.add_argument(dest='account', action='store', help='Account name')
    list_account_usage_parser.add_argument('--history', dest='history', default=False, action='store', help='List account usage history')

    # The list-account-limits subparser
    list_account_limits_parser = subparsers.add_parser('list-account-limits', help='list-account-limits method')
    list_account_limits_parser.set_defaults(which='list_account_limits')
    list_account_limits_parser.add_argument(dest='account', action='store', help='Account name')

    # Add replication rule subparser
    add_rule_parser = subparsers.add_parser('add-rule', help='Add replication rule')
    add_rule_parser.set_defaults(which='add_rule')
    add_rule_parser.add_argument(dest='dids', action='store', nargs='+', help='DID(s) to apply the rule to')
    add_rule_parser.add_argument(dest='copies', action='store', type=int, help='Number of copies')
    add_rule_parser.add_argument(dest='rse_expression', action='store', help='RSE Expression')
    add_rule_parser.add_argument('--weight', dest='weight', action='store', help='RSE Weight')
    add_rule_parser.add_argument('--lifetime', dest='lifetime', action='store', type=int, help='Rule lifetime (in hours)')
    add_rule_parser.add_argument('--grouping', dest='grouping', action='store', choices=['dataset', 'all', 'none'], help='Rule grouping')
    add_rule_parser.add_argument('--locked', dest='locked', action='store_true', help='Rule locking')

    # Del replication rule subparser
    del_rule_parser = subparsers.add_parser('del-rule', help='Delete replication rule')
    del_rule_parser.set_defaults(which='del_rule')
    del_rule_parser.add_argument(dest='rule_id', action='store', help='Rule id')

    # The list_rules command
    list_rules_parser = subparsers.add_parser('list-rules', help='List replication rules')
    list_rules_parser.set_defaults(which='list_rules')
    list_rules_parser.add_argument('--rule', dest='rule_id', action='store', help='List by rule id')
    list_rules_parser.add_argument('--did', dest='did', action='store', help='List by did')
    list_rules_parser.add_argument('--account', dest='rule_account', action='store', help='List by account')
    list_rules_parser.add_argument('--subscription', dest='subscription', action='store', help='List by account and subscription name', metavar=('ACCOUNT', 'SUBSCRIPTION'), nargs=2)

    argcomplete.autocomplete(oparser)

    if len(sys.argv) == 1:
        oparser.print_help()
        sys.exit(FAILURE)

    args = oparser.parse_args(sys.argv[1:])

    commands = {'ping': ping,
                'add_replicas': add_replicas,
                'list_replicas': list_replicas,
                'attach': attach,
                'detach': detach,
                'add': add,
                'add_dataset': add_dataset,
                'add_container': add_container,
                'delete': delete,
                # 'delete_dataset': delete_dataset,
                # 'delete_container': delete_container,
                'list': list,
                'list_files': list_files,
                'list_scopes': list_scopes,
                'close': close,
                'stat': stat,
                'whoami_account': whoami_account,
                'download': download,
                'upload': upload,
                'get_metadata': get_metadata,
                'set_metadata': set_metadata,
                'del_metadata': del_metadata,
                'add_rule': add_rule,
                'list_rules': list_rules,
                'del_rule': del_rule, }

    try:
        start_time = time.time()
        command = commands.get(args.which)
        result = command(args)
        end_time = time.time()
        if args.verbose:
            print "Completed in %-0.4f sec." % (end_time - start_time)
        sys.exit(result)
    except (RuntimeError, NotImplementedError), e:
        print >> sys.stderr, "ERROR: ", e
        sys.exit(FAILURE)
