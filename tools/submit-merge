#!/usr/bin/env python
#
# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Martin Barisits, <martin.barisits@cern.ch>, 2015


import commands
import sys
import json
import requests

requests.packages.urllib3.disable_warnings()


def submit_merge_request(proj_id, data):
    r = requests.post(url='https://gitlab.cern.ch/api/v3/projects/%s/merge_requests' % str(proj_id),
                      params={'private_token': private_token},
                      data=data)
    return r


root_git_dir = commands.getstatusoutput('git rev-parse --show-toplevel')[1]

# Load private_token
print 'Loading private token ...',
try:
    with open(root_git_dir + '/.gitlabkey', 'r') as f:
        private_token = f.readline().strip()
        print 'OK'
except:
    print 'ERROR'
    print 'No gitlab keyfile found at %s' % root_git_dir + '/.gitlabkey'
    sys.exit(-1)

# Check if current branch is not master or next
print 'Checking if current branch is a patch/feature branch ...',
current_branch = commands.getstatusoutput('git rev-parse --abbrev-ref HEAD')[1]
commit_msg = current_branch
for line in commands.getstatusoutput('git show')[1].splitlines():
    if line.strip().startswith('[RUCIO-'):
        commit_msg = line.strip()
if current_branch == 'master' or current_branch == 'next':
    print 'ERROR'
    print 'You are currently on branch \'%s\'. Please change to a feature/patch branch.' % current_branch
    sys.exit(-1)
if not current_branch.startswith('patch') and current_branch.startswith('feature'):
    print 'ERROR'
    print 'You are currently on branch \'%s\'. This is not a feature/patch/branch.' % current_branch
    sys.exit(-1)
print 'OK'

# Get the gitlab id of the user
print 'Retrieving the private (forked) git repository id ...',
resp = requests.get(url='https://gitlab.cern.ch/api/v3/projects',
                    params={'private_token': private_token})
proj_list = json.loads(resp.text)
personal_project_id = None
for proj in proj_list:
    if 'forked_from_project' in proj:
        if proj['forked_from_project']['id'] == 651:
            print 'OK'
            personal_project_id = proj['id']
if not personal_project_id:
    print 'ERROR'
    print 'Could not retrieve the personal project id.'
    sys.exit(-1)

# Push the branch to origin
print 'Pushing the feature/patch branch to origin ...',
op = commands.getstatusoutput('git push origin %s' % current_branch)
if op[0] == 0:
    print 'OK'
else:
    print 'ERROR'
    print op[1]
    sys.exit(-1)

# Check if there is already a merge request for this:
print 'Checking if there already exists a merge request for this feature/patch ...',
resp = requests.get(url='https://gitlab.cern.ch/api/v3/projects/651/merge_requests',
                    params={'private_token': private_token})
mr_list = json.loads(resp.text)
for mr in mr_list:
    if mr['source_branch'] == current_branch and mr['state'] == 'opened':
        print 'ERROR'
        print 'There is already an open Merge Request for this branch.'
        sys.exit(-1)
print 'OK'

# Create the Merge-requests
if current_branch.startswith('patch'):
    print 'Submitting merge request against next ...',
    result = submit_merge_request(proj_id=personal_project_id,
                                  data={'source_branch': current_branch,
                                        'target_branch': 'next',
                                        'title': commit_msg,
                                        'target_project_id': 651,
                                        'labels': ['Patch']})
    if result.status_code == 200 or result.status_code == 201:
        print 'OK'
    else:
        print 'ERROR'
        print result.content
    print 'Submitting merge request against master ...',
    result = submit_merge_request(proj_id=personal_project_id,
                                  data={'source_branch': current_branch,
                                        'target_branch': 'master',
                                        'title': commit_msg,
                                        'target_project_id': 651,
                                        'labels': ['Patch']})
    if result.status_code == 200 or result.status_code == 201:
        print 'OK'
    else:
        print 'ERROR'
        print result.content
else:
    # Submit against NEXT
    print 'Submitting merge request against next ...',
    result = submit_merge_request(proj_id=personal_project_id,
                                  data={'source_branch': current_branch,
                                        'target_branch': 'next',
                                        'title': commit_msg,
                                        'target_project_id': 651,
                                        'labels': ['Feature']})
    if result.status_code == 200 or result.status_code == 201:
        print 'OK'
    else:
        print 'ERROR'
        print result.content
