#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Martin Barisits, <martin.barisits.@cern.ch>, 2015

'''
Cron to repair replicating locks due to conveyor bug (2015-01-28)
'''

import datetime
import sys
import time

from rucio.core import monitor
from rucio.db.session import get_session

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":

    try:
        session = get_session()
        # replicas time hourly
        sql = "DECLARE\
                   cnt NUMBER;\
               BEGIN\
                   for r in (SELECT id FROM ATLAS_RUCIO.rules \
                             WHERE state = 'R' and\
                             created_at > sysdate-30 and\
                             created_at < sysdate-1)\
                   loop\
                       cnt := 0;\
                       for l in (SELECT scope, name, rse_id FROM ATLAS_RUCIO.locks lo\
                                 WHERE rule_id=r.id and\
                                 state = 'R' and\
                                 not exists (SELECT * FROM ATLAS_RUCIO.requests where scope=lo.scope and name=lo.name and dest_rse_id=lo.rse_id))\
                       loop\
                           cnt := cnt + 1;\
                           UPDATE ATLAS_RUCIO.locks set state='S' WHERE scope=l.scope and name=l.name and rse_id=l.rse_id and rule_id=r.id;\
                       end loop;\
                       IF cnt > 0 THEN\
                           UPDATE ATLAS_RUCIO.rules SET state = 'S' where id = r.id;\
                           COMMIT;\
                       END IF;\
                   end loop;\
               END;"
        session.execute(sql)
    except Exception, e:
	# print e
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)
