#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2014-2015
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2015

import os
import sys
import requests
from urlparse import urlparse

from rucio.common.config import config_get
from rucio.core import monitor

OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

requests.packages.urllib3.disable_warnings()

if __name__ == "__main__":

    try:
        vo = sys.argv[1]
    except IndexError, e:
        vo = 'atlas'
    worst_retvalue = OK

    try:
        proxy = config_get('nagios', 'proxy')
        os.environ["X509_USER_PROXY"] = proxy
    except Exception as e:
        print "Failed to get proxy from rucio.cfg"
        worst_retvalue = WARNING

    try:
        ftshosts = config_get('conveyor', 'ftsmonhosts')
    except Exception as e:
        print "Failed to get ftsmonhosts"
        worst_retvalue = WARNING
    for ftshost in ftshosts.split(','):
        url = '%s/fts3/ftsmon/overview?dest_se=&source_se=&time_window=1&vo=%s' % (ftshost, vo)
        for attempt in xrange(0, 5):
            print '%i/5 attempt to contact %s' % (attempt+1, ftshost)
            try:
                r = requests.get(url, verify=False)
                res = r.json()
                busylimit = 5000
                for channel in res['overview']['items']:
                    if 'submitted' in channel and channel['submitted'] >= busylimit:
                        print 'Busy channels (>%s submitted) : %s to %s : %s jobs' % (busylimit, channel['source_se'], channel['dest_se'], channel['submitted'])
                summary = res['summary']
                h = urlparse(url)
                hostname = h.hostname.replace('.', '_')
                print '%s : Submitted : %s' % (hostname, summary['submitted'])
                print '%s : Active : %s' % (hostname, summary['active'])
                print '%s : Staging : %s' % (hostname, summary['staging'])
                print '%s : Started : %s' % (hostname, summary['started'])
                monitor.record_gauge(stat='fts3.%s.submitted' % (hostname), value=(summary['submitted'] + summary['active'] + summary['staging'] + summary['started']))
                retvalue = OK
                break
            except Exception, e:
                retvalue = CRITICAL
                if r.status_code:
                    print 'Error when trying to get info from %s : HTTP status code %s. [%s]' % (ftshost, str(r.status_code), str(e))
                else:
                    print 'Error when trying to get info from %s. %s' % (ftshost, str(e))
        worst_retvalue = max(retvalue, worst_retvalue)
    sys.exit(worst_retvalue)
