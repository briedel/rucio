[
  { "id": "rucio.daemons.conveyor",
    "from": "-10minutes",
    "until": "-1minutes",
    "targets":  [{ "name": "rucio.daemons.conveyor.requests.{target}",
                    "target": "groupByNode(summarize(stats.rucio.queues.requests.*.*.*,'10min','avg',true),4,'sum')",
                    "desc": "Size of request queues per type"
                  },
                  { "name": "rucio.daemons.conveyor.transfers.{target}.rate",
                    "target": "groupByNode(summarize(stats.rucio.transfertool.fts3.*.submission.*.rate,'10min','avg',true),6,'sum')",
                    "desc": "Transfer rate per status (i.e. failure or success)"
                  }
    ],
    "availability": { "metric": "alias(sumSeries(stats.rucio.transfertool.fts3.*.submission.*.rate), 'availability')",
                      "mapping": "100 if ( {value}> 17) else (100/17*{value})",
                      "info": "Transfer success rate in Hz (100% is 17Hz and higher / (100/17*{rate})% below 17Hz)"
                    }
  },
  { "id": "rucio.daemons.reaper",
    "from": "-10minutes",
    "until": "-1minutes",
    "targets":  [{ "name": "rucio.daemons.reaper.deletion.{target}",
                    "target": "aliasByNode(summarize(stats.rucio.reaper.deletion.*.count,'10min','avg',true),4)",
                    "desc": "Number of replicas in state done or being_deleted"
                  }
    ],
    "availability": { "metric": "summarize(diffSeries(stats.rucio.reaper.deletion.being_deleted.count,*.rucio.reaper.deletion.done.count),'10min','avg',true)",
                      "mapping": "100 if ( abs({value}) < 1000) else (0 if abs({value}) > 2000 else (100-(100.0/(2000-1000)*(abs({value})-1000))))",
                      "info": "If delta smaller 1K = 100%; If delta greater than 2K = 0%"
                    }
  },
  { "id": "rucio.daemons.undertaker",
    "from": "-10minutes",
    "until": "-1minutes",
    "targets":  [{ "name": "rucio.daemons.reaper.undertaker",
                    "target": "summarize(stats.rucio.undertaker.expired_dids,'10min','avg',true)",
                    "desc": "Number of expired DIDs"
                  }
    ],
    "availability": { "metric": "summarize(stats.rucio.undertaker.expired_dids,'10min','avg',true)",
                      "mapping": "100 if ( abs({value}) < 2000) else (0 if abs({value}) > 4000 else (100-(100.0/(4000-2000)*(abs({value})-2000))))",
                      "info": "If expired DIDs , 2K = 100%; greater than 4K = 0%"
                    }
  },
  { "id": "rucio.daemons.kronos",
    "from": "-10minutes",
    "until": "-1minutes",
    "targets":  [{ "name": "rucio.daemons.kronos.rate",
                    "target": "summarize(stats.rucio.trace.trace.rate,'10min','avg',true)",
                    "desc": "Request rate on traces frontend in Hz"
                  },
                  { "name": "rucio.daemons.kronos.access_time",
                    "target": "summarize(stats.timers.rucio.daemons.tracer.kronos.update_atime.mean,'10min','avg',true)",
                    "desc": "Time needed to updated replicas access time in database (ms)"
                  },
                  { "name": "rucio.daemons.kronos.errors",
                    "target": "summarize(stats.rucio.daemons.tracer.kronos.update_error.count,'10min','sum',true)",
                    "desc": "Number of errors Errors"
                  },
                  { "name": "rucio.daemons.kronos.reconnects",
                    "target": "summarize(sumSeries(stats.rucio.daemons.tracer.kronos.reconnect.*.count),'10min','sum',true)",
                    "desc": "Nuiber of reconnect attempts to message broker"
                  }
    ],
    "availability": { "metric": "summarize(diffSeries(stats.rucio.daemons.tracer.kronos.reports.rate,stats.rucio.trace.trace.rate),'10min','avg',true)",
                      "mapping": "100 if ( abs({value}) < 100) else (0 if abs({value}) > 200 else (100-(abs({value})-100)))",
                      "info": "Incoming vs Computed Requests: below 100 = 100%; above 100 = 0%"
                    }
  },
  { "id": "rucio.loadbalancer",
    "from": "-10minutes",
    "until": "-1minutes",
    "targets":  [{ "name": "rucio.loadbalancer.{target}.idle_pct",
                   "target": "groupByNode(summarize(stats.rucio.monitoring.loadbalancer.rucio-lb-prod-*.*.Idle_pct,'10min','avg',true),4,'avg')",
                   "desc": "Idel percentage as reported by the loadbalancer"
                 },
                 { "name": "rucio.loadbalancer.panda.writer.sessions",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-panda.BACKEND.scur),'10min','avg',true)",
                   "desc": "Concurrent HTTP session for Panda PUT, POST, DELETE requests"
                 },
                 { "name": "rucio.loadbalancer.panda.reader.sessions",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-panda-reader.BACKEND.scur),'10min','avg',true)",
                   "desc": "Concurrent HTTP session for Panda GET requests"
                 },
                 { "name": "rucio.loadbalancer.plebs.writer.sessions",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-servers.BACKEND.scur),'10min','avg',true)",
                   "desc": "Concurrent HTTP session for Plebs PUT, POST, DELETE requests"
                 },
                 { "name": "rucio.loadbalancer.plebs.reader.sessions",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-reader.BACKEND.scur),'10min','avg',true)",
                   "desc": "Concurrent HTTP session for Plebs GET requests"
                 },
                 { "name": "rucio.loadbalancer.panda.writer.response_time",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-panda.BACKEND.rtime),'10min','avg',true)",
                   "desc": "Avg response time for Panda PUT, POST, DELETE requests"
                 },
                 { "name": "rucio.loadbalancer.panda.reader.response_time",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-panda-reader.BACKEND.rtime),'10min','avg',true)",
                   "desc": "Avg response time for Panda GET requests"
                 },
                 { "name": "rucio.loadbalancer.plebs.writer.response_time",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-servers.BACKEND.rtime),'10min','avg',true)",
                   "desc": "Avg response time for Plebs PUT, POST, DELETE requests"
                 },
                 { "name": "rucio.loadbalancer.plebs.reader.response_time",
                   "target": "summarize(sumSeries(stats.rucio.monitoring.loadbalancer.*.*.rucio-reader.BACKEND.rtime),'10min','avg',true)",
                   "desc": "Avg response time for Plebs GET requests"
                 }
    ],
    "availability": { "metric": "averageSeries(summarize(stats.rucio.monitoring.loadbalancer.rucio-lb-prod-*.*.Idle_pct, '10min', 'avg', true))",
                      "info": " Combined average idle percentage over all loadbalancer instances"
                    }
  },
  { "id": "rucio.httpd",
    "from": "-10minutes",
    "until": "-1minutes",
    "targets":  [{ "name": "rucio.httpd.{target}.availability",
                   "target": "aliasByNode(summarize(stats.rucio.monitoring.backends.rucio-server-prod-*.availability,'10min','avg',true),4)",
                   "desc": "Percentag of idle workers reported by the web server"
                 },
                 { "name": "rucio.httpd.{target}.cpu_load",
                   "target": "aliasByNode(summarize(stats.rucio.monitoring.backends.rucio-server-prod-*.CPULoad,'10min','avg',true),4)",
                   "desc": "CPU load as reported by the web server"
                 }
    ],
    "availability": { "metric": "aliasByNode(summarize(stats.rucio.monitoring.backends.rucio-server-prod-*.availability,'10min','avg',true),4)",
                      "info": " Combined average idle percentage over all loadbalancer instances"
                    }
  }
]
