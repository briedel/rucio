#!/usr/bin/env python

# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Joaquin Bogado, <joaquin.bogado@cern.ch>, 2014

import os
import random
import sys
import time
import datetime
import requests
import socket
from subprocess import call
from rucio.client import Client
from random import choice
from string import ascii_uppercase
from rucio.common.utils import uuid

c = Client()
scp = 'rucio01'
fl=[]
dsname = 'RUCIO_CLIENT_TEST_BM_' + uuid().urn.split(':')[2]

def test_create_dataset(file_list, dsn=dsname):   # size = amount of files to include to the dataset
    c.add_dataset(scp, dsn)
    tick = time.time()
    c.add_files_to_dataset(scp, dsn, file_list[0:100])
    tick = time.time() - tick
    c.add_files_to_dataset(scp, dsn, file_list[100:600])
    c.add_files_to_dataset(scp, dsn, file_list[600:900])
    c.add_files_to_dataset(scp, dsn, file_list[900:1200])
    return tick

def test_read_big_dataset():
    tick = time.time()
    c.list_files(scp, dsname)
    return time.time() - tick

def test_quering_replicas_chuncked(file_list):
    tick = time.time()
    c.list_replicas(file_list[0:100])
    c.list_replicas(file_list[100:200])
    c.list_replicas(file_list[200:300])
    c.list_replicas(file_list[300:400])
    c.list_replicas(file_list[400:500])
    c.list_replicas(file_list[500:600])
    c.list_replicas(file_list[600:700])
    c.list_replicas(file_list[700:800])
    c.list_replicas(file_list[800:900])
    c.list_replicas(file_list[900:1000])
    return (time.time() - tick)/10

def main():
    f = open('/etc/filelist')
    for line in f:
        fl.append({'scope':line.split(':')[0], 'name':(line.split(':')[1])[:-1]})

    timestamp = datetime.datetime.now().isoformat().split('.')[0]

    createtime = test_create_dataset(fl)
    readtime = test_read_big_dataset()
    querytime = test_quering_replicas_chuncked(fl)

    xmlmetric = """<!-- FILE: /path/to/file.xml -->
    <?xml version="1.0" encoding="UTF-8"?>
    <serviceupdate>
      <id>rucio.{4}.client_benchmark</id>
      <timestamp>{0}</timestamp>
      <availability>100</availability>
      <data>
        <numericvalue name="create_dataset" desc="Time to create a dataset with 100 files in seconds">{2}</numericvalue>
        <numericvalue name="read_big_dataset" desc="Time to read dataset with 1000 files in seconds">{1}</numericvalue>
        <numericvalue name="quering_replicas_chuncked" desc="Avg time to query the replicas of 100 files in seconds">{3}</numericvalue>
      </data>
	</serviceupdate>""".format(timestamp, readtime, createtime, querytime, socket.getfqdn()[:-8])
    r = requests.post('http://xsls.cern.ch', files={'file': xmlmetric})
    sys.exit(not(r.status_code == 200))

if __name__ == '__main__':
    main()
