#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#                       http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Ralph Vigne, <ralph.vigne@cern.ch> 2015
#
# If the connection to Elasticsearch (ES) is broken, Redis starts persisting data on disk till ES is back.
# If the downtime of ES is longer, the disk might run full and take the node down. Currently the disk space
# lasts for about 30 hours (2Gb/h). In order to protect the node from running out of disk space, this node
# check the free disk space and if below a certain threshold, drops entries from the rucio.debug queue to
# free up disk space again.
#
# If after dropping data, the disk space is low, a critical error is raised and an email alert sent.
#
# This probe should be executed every 15 minutes on the host running Redis.

import os
import redis
import socket
import sys
import time
import traceback

from datetime import datetime
from elasticsearch import Elasticsearch

ES_URL = 'rucio-logger-prod-01.cern.ch:80/elastic'

UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

REDIS_URL = "rucio-logger-prod-01"
REDIS_QUEUES = ["rucio.haproxy", "rucio.apache", "rucio.daemons", "rucio.debug"]

# Size when it starts to reported (but not alerted!)
THRESHOLD_QUEUE_SIZE = 50000

# Threshold where it starts to be reported (but not alerted!)
THRESHOLD_GB = 8
# Threshold where alters are sent via email
THRESHOLD_CRITICAL_GB = 4


def get_free_disk_space():
    s = os.statvfs('/')
    return (s.f_bavail * s.f_frsize) / 1024


if __name__ == '__main__':
    server = redis.Redis(REDIS_URL)
    status = OK
    es = Elasticsearch(ES_URL)
    today = datetime.today()
    log_index = 'logs-rucio-residue-%04d.%02d.%02d' % (today.year, today.month, today.day)

    for queue in REDIS_QUEUES:
        try:
            queue_len = server.llen(queue)
            if queue_len > THRESHOLD_QUEUE_SIZE:
                es.index(index=log_index,
                         doc_type='rucio-residue',
                         body={'message': 'Queue %s on node %s exceeded size threshold.' % (queue, REDIS_URL),
                               'application': 'check_redis',
                               'queue-name': queue,
                               'queue-size': queue_len,
                               'severity': 6,
                               'severity_label': 'info',
                               'facility': 1,
                               'host': socket.getfqdn(),
                               '@timestamp': datetime.utcnow()})
        except Exception as e:
            traceback.print_exc()
            status = WARNING
        except redis.exceptions.ConnectionError as e:
            print 'Failed connecting to REDIS server \"%s\": ' % (REDIS_URL, str(e))
            try:
                es.index(index=log_index,
                         doc_type='rucio-residue',
                         body={'message': 'Failed connecting to REDIS server \"%s\": ' % (REDIS_URL, str(e)),
                               'application': 'check_redis',
                               'severity': 2,
                               'severity_label': 'critical',
                               'facility': 1,
                               'host': socket.getfqdn(),
                               '@timestamp': datetime.utcnow()})
            except Exception as arg:
                traceback.print_exc()
            sys.exit(CRITICAL)

    free_disk_space = get_free_disk_space()

    if free_disk_space < THRESHOLD_GB * (1024*1024):  # GB to bytes
        debug_cutoff = server.llen('rucio.debug')/2
        server.ltrim('rucio.debug', debug_cutoff, -1)
        status = WARNING if status == OK else status
        time.sleep(10)  # Sleeping two minutes to wait for the effects on queue trimming on disk
        free_disk_space_after = get_free_disk_space()
        try:
            es.index(index=log_index,
                     doc_type='rucio-residue',
                     body={'message': 'Deleted %s entries from debug queue on host %s. Freed up %d MB of disk space (before: %d, after: %d).' % (debug_cutoff,
                                                                                                                                                 REDIS_URL,
                                                                                                                                                 (free_disk_space_after - free_disk_space)/1024,
                                                                                                                                                 free_disk_space/1024,
                                                                                                                                                 free_disk_space_after/1024),
                           'application': 'check_redis',
                           'severity': 4,
                           'severity_label': 'warning',
                           'facility': 1,
                           'host': socket.getfqdn(),
                           '@timestamp': datetime.utcnow()})
        except Exception as arg:
            traceback.print_exc()
        if free_disk_space_after < THRESHOLD_CRITICAL_GB * (1024*1024):
            status = CRITICAL
            print 'Cleaning debug queue wasn\'t sufficient to free enough disk space. Last gain: %d mb (%d entries)' % ((free_disk_space_after-free_disk_space)/1024, debug_cutoff)
            try:
                es.index(index=log_index,
                         doc_type='rucio-residue',
                         body={'message': 'Cleaning debug queue wasn\'t sufficient to free enough disk space. Last gain: %d mb (%d entries)' % ((free_disk_space_after-free_disk_space)/1024, debug_cutoff),
                               'application': 'check_redis',
                               'severity': 2,
                               'severity_label': 'critical',
                               'facility': 1,
                               'host': socket.getfqdn(),
                               '@timestamp': datetime.utcnow()})
            except Exception as arg:
                traceback.print_exc()
    sys.exit(status)
