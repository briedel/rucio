#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#                       http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - David Cameron, <david.cameron@cern.ch>, 2015
#
# Get country groups from VOMS, get DNs with production role,
# map to Rucio account and set country-<country>: admin
# Get all DNs in country and set country-<country>: user
# Get all names in cloud support e-group and set cloud-<cloud>: admin

import os
import re
import sys
import shlex
import subprocess

from rucio.api.account import list_accounts, add_account_attribute, del_account_attribute, list_account_attributes
from rucio.common.config import config_get
from rucio.common.exception import RucioException, Duplicate, AccountNotFound

from VOMSAdmin.VOMSCommands import VOMSAdminProxy

UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

result = OK


def add_country_attributes(dns, country, role):

    if not dns:
        print 'No user with %s role in country %s' % (role, country)
        return

    accounts_done = []
    for dn in dns:
        # Get Rucio account
        accounts = list_accounts(filter={'identity': dn._DN, 'account_type': 'USER'})
        if not accounts:
            print "Warning: no user accounts for %s" % dn._DN
            continue

        for acc in accounts:
            account = acc['account']
            if account not in accounts_done:
                print 'Set %s role for country-%s for %s' % (role, country, account)
                try:
                    attrs = dict([(u['key'], u['value']) for u in list_account_attributes(account)])
                    key = 'country-%s' % country
                    if key in attrs and attrs[key] == role:
                        print 'Account %s already has the role %s' % (account, role)
                        continue
                    else:
                        del_account_attribute(key, account, 'root')
                    add_account_attribute(key, role, account, 'root')
                except Duplicate:
                    pass
                except RucioException, e:
                    print "Failed to add account attribute: %s" % str(e)
                    result = WARNING  # NOQA
                accounts_done.append(account)


def add_cloud_admins():

    for cloud in ['ca', 'de', 'es', 'fr', 'it', 'ng', 'nl', 'ru', 't0', 'tw', 'uk', 'us']:
        egroup = 'atlas-support-cloud-%s' % cloud
        if cloud == 'ru':
            egroup = 'atlas-adc-cloud-ru'
        cmd = "/usr/bin/ldapsearch -x -h xldap.cern.ch -b 'CN=%s,OU=e-groups,OU=Workgroups,DC=cern,DC=ch' member" % egroup

        p = subprocess.Popen(shlex.split(cmd), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
        (stdout, stderr) = p.communicate()
        if p.returncode != 0:
            print "Warning: Failed to run ldapsearch: %s" % stdout
            result = WARNING
            continue

        # Always exceptions...
        cloud = cloud.replace('t0', 'cern')
        cloud = cloud.replace('ng', 'nd')
        for line in stdout.split('\n'):
            m = re.match('member: CN=(\w+),OU=Users', line)
            if m:
                account = m.group(1)
                print 'Set admin role for cloud-%s for %s' % (cloud, account)
                try:
                    add_account_attribute('cloud-%s' % cloud, 'admin', account, 'root')
                except Duplicate:
                    pass
                except AccountNotFound:
                    print 'Warning: Account %s not in Rucio' % account
                    result = WARNING
                except RucioException, e:
                    print "Failed to add account attribute: %s" % str(e)
                    result = WARNING  # NOQA

if __name__ == '__main__':
    result = OK
    try:
        proxy = config_get('nagios', 'proxy')
        os.environ["X509_USER_PROXY"] = proxy
        cert, key = os.environ['X509_USER_PROXY'], os.environ['X509_USER_PROXY']
    except Exception as e:
        print "Failed to get proxy from rucio.cfg"
        sys.exit(CRITICAL)

    admin = VOMSAdminProxy(vo='atlas', host='voms2.cern.ch', port=8443,
                           user_cert=cert, user_key=key)
    res = admin.call_method('list-sub-groups', '/atlas')
    if not res:
        print 'Could not list VOMS groups'
        sys.exit(CRITICAL)

    for group in res:
        m = re.match('/atlas/(\w\w)$', group) or re.match('/atlas/(cern)$', group) or re.match('/atlas/(usatlas)$', group)
        if not m:
            continue
        vomsgroup = m.group(0)
        country = m.group(1)
        if country == 'usatlas':
            country = 'us'

        # Get DNs in country group
        dns = admin.call_method('list-members', vomsgroup)
        add_country_attributes(dns, country, 'user')

        # Get DNs with production role in each country (upgrades the role from user to admin if applicable)
        dns = admin.call_method('list-users-with-role', vomsgroup, 'Role=production')
        add_country_attributes(dns, country, 'admin')

    # Add cloud admins from ldap egroups
    add_cloud_admins()

    sys.exit(result)
